
LAB3_VXL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000309c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080031a8  080031a8  000041a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031d8  080031d8  00005078  2**0
                  CONTENTS
  4 .ARM          00000000  080031d8  080031d8  00005078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031d8  080031d8  00005078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031d8  080031d8  000041d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031dc  080031dc  000041dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080031e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000078  08003258  00005078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003258  00005178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008922  00000000  00000000  000050a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d41  00000000  00000000  0000d9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0000f708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000812  00000000  00000000  000101c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171df  00000000  00000000  000109d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d477  00000000  00000000  00027bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000828dc  00000000  00000000  00035028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7904  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002944  00000000  00000000  000b7948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ba28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003190 	.word	0x08003190

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003190 	.word	0x08003190

0800014c <isApplyPressed>:
int TimeOutForKeyPress[4] =  {500,500,500,500};
int button_pressed[4] = {0,0,0,0};
int button1_long_pressed = 0;
int button_flag[4] = {0,0,0,0};

int isApplyPressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button_flag[3] == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	@ (800016c <isApplyPressed+0x20>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isApplyPressed+0x16>
		button_flag[3] = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	@ (800016c <isApplyPressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	60da      	str	r2, [r3, #12]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isApplyPressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000098 	.word	0x20000098

08000170 <isModePressed>:
int isModePressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button_flag[0] == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	@ (8000190 <isModePressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isModePressed+0x16>
		button_flag[0] = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	@ (8000190 <isModePressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isModePressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000098 	.word	0x20000098

08000194 <isTimeUpPressed>:
int isTimeUpPressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button_flag[1] == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	@ (80001b4 <isTimeUpPressed+0x20>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isTimeUpPressed+0x16>
		button_flag[1] = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <isTimeUpPressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	605a      	str	r2, [r3, #4]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isTimeUpPressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000098 	.word	0x20000098

080001b8 <isTimeDownPressed>:
int isTimeDownPressed(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if(button_flag[2] == 1){
 80001bc:	4b06      	ldr	r3, [pc, #24]	@ (80001d8 <isTimeDownPressed+0x20>)
 80001be:	689b      	ldr	r3, [r3, #8]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isTimeDownPressed+0x16>
		button_flag[2] = 0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <isTimeDownPressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	609a      	str	r2, [r3, #8]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isTimeDownPressed+0x18>
	}
	return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	20000098 	.word	0x20000098

080001dc <getKeyInput>:
	//TODO
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	button1_flag = 1;
}

void getKeyInput(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	e012      	b.n	800020e <getKeyInput+0x32>
		KeyReg2[i] = KeyReg1[i];
 80001e8:	4a4c      	ldr	r2, [pc, #304]	@ (800031c <getKeyInput+0x140>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f0:	494b      	ldr	r1, [pc, #300]	@ (8000320 <getKeyInput+0x144>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001f8:	4a4a      	ldr	r2, [pc, #296]	@ (8000324 <getKeyInput+0x148>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	4946      	ldr	r1, [pc, #280]	@ (800031c <getKeyInput+0x140>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	3301      	adds	r3, #1
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2b03      	cmp	r3, #3
 8000212:	dde9      	ble.n	80001e8 <getKeyInput+0xc>
	}

  // Add your key
  KeyReg0[0] = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 8000214:	2101      	movs	r1, #1
 8000216:	4844      	ldr	r0, [pc, #272]	@ (8000328 <getKeyInput+0x14c>)
 8000218:	f001 ff8c 	bl	8002134 <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	461a      	mov	r2, r3
 8000220:	4b40      	ldr	r3, [pc, #256]	@ (8000324 <getKeyInput+0x148>)
 8000222:	601a      	str	r2, [r3, #0]
  KeyReg0[1] = HAL_GPIO_ReadPin(TIME_UP_GPIO_Port, TIME_UP_Pin);
 8000224:	2102      	movs	r1, #2
 8000226:	4840      	ldr	r0, [pc, #256]	@ (8000328 <getKeyInput+0x14c>)
 8000228:	f001 ff84 	bl	8002134 <HAL_GPIO_ReadPin>
 800022c:	4603      	mov	r3, r0
 800022e:	461a      	mov	r2, r3
 8000230:	4b3c      	ldr	r3, [pc, #240]	@ (8000324 <getKeyInput+0x148>)
 8000232:	605a      	str	r2, [r3, #4]
  KeyReg0[2] = HAL_GPIO_ReadPin(TIME_DOWN_GPIO_Port, TIME_DOWN_Pin);
 8000234:	2104      	movs	r1, #4
 8000236:	483c      	ldr	r0, [pc, #240]	@ (8000328 <getKeyInput+0x14c>)
 8000238:	f001 ff7c 	bl	8002134 <HAL_GPIO_ReadPin>
 800023c:	4603      	mov	r3, r0
 800023e:	461a      	mov	r2, r3
 8000240:	4b38      	ldr	r3, [pc, #224]	@ (8000324 <getKeyInput+0x148>)
 8000242:	609a      	str	r2, [r3, #8]
  KeyReg0[3] = HAL_GPIO_ReadPin(APPLY_GPIO_Port, APPLY_Pin);
 8000244:	2108      	movs	r1, #8
 8000246:	4838      	ldr	r0, [pc, #224]	@ (8000328 <getKeyInput+0x14c>)
 8000248:	f001 ff74 	bl	8002134 <HAL_GPIO_ReadPin>
 800024c:	4603      	mov	r3, r0
 800024e:	461a      	mov	r2, r3
 8000250:	4b34      	ldr	r3, [pc, #208]	@ (8000324 <getKeyInput+0x148>)
 8000252:	60da      	str	r2, [r3, #12]
  	  for (int i = 0; i < 4; i++) {
 8000254:	2300      	movs	r3, #0
 8000256:	603b      	str	r3, [r7, #0]
 8000258:	e058      	b.n	800030c <getKeyInput+0x130>
  		  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800025a:	4a30      	ldr	r2, [pc, #192]	@ (800031c <getKeyInput+0x140>)
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000262:	4930      	ldr	r1, [pc, #192]	@ (8000324 <getKeyInput+0x148>)
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800026a:	429a      	cmp	r2, r3
 800026c:	d14b      	bne.n	8000306 <getKeyInput+0x12a>
 800026e:	4a2b      	ldr	r2, [pc, #172]	@ (800031c <getKeyInput+0x140>)
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000276:	492a      	ldr	r1, [pc, #168]	@ (8000320 <getKeyInput+0x144>)
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800027e:	429a      	cmp	r2, r3
 8000280:	d141      	bne.n	8000306 <getKeyInput+0x12a>
  			  if (KeyReg2[i] != KeyReg3[i]){
 8000282:	4a27      	ldr	r2, [pc, #156]	@ (8000320 <getKeyInput+0x144>)
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028a:	4928      	ldr	r1, [pc, #160]	@ (800032c <getKeyInput+0x150>)
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000292:	429a      	cmp	r2, r3
 8000294:	d019      	beq.n	80002ca <getKeyInput+0xee>
  				  KeyReg3[i] = KeyReg2[i];
 8000296:	4a22      	ldr	r2, [pc, #136]	@ (8000320 <getKeyInput+0x144>)
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800029e:	4923      	ldr	r1, [pc, #140]	@ (800032c <getKeyInput+0x150>)
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  				  if (KeyReg3[i] == PRESSED_STATE){
 80002a6:	4a21      	ldr	r2, [pc, #132]	@ (800032c <getKeyInput+0x150>)
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d129      	bne.n	8000306 <getKeyInput+0x12a>
  					  TimeOutForKeyPress[i] = 500;
 80002b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000330 <getKeyInput+0x154>)
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80002ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  					  //subKeyProcess();
  					  button_flag[i] = 1;
 80002be:	4a1d      	ldr	r2, [pc, #116]	@ (8000334 <getKeyInput+0x158>)
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2101      	movs	r1, #1
 80002c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002c8:	e01d      	b.n	8000306 <getKeyInput+0x12a>
  				  }

  			  }else{
  				  TimeOutForKeyPress[i] --;
 80002ca:	4a19      	ldr	r2, [pc, #100]	@ (8000330 <getKeyInput+0x154>)
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d2:	1e5a      	subs	r2, r3, #1
 80002d4:	4916      	ldr	r1, [pc, #88]	@ (8000330 <getKeyInput+0x154>)
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  				  if (TimeOutForKeyPress[i] == 0){
 80002dc:	4a14      	ldr	r2, [pc, #80]	@ (8000330 <getKeyInput+0x154>)
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d10e      	bne.n	8000306 <getKeyInput+0x12a>
  					  TimeOutForKeyPress[i] = 500;
 80002e8:	4a11      	ldr	r2, [pc, #68]	@ (8000330 <getKeyInput+0x154>)
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80002f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  					  if (KeyReg3[i] == PRESSED_STATE){
 80002f4:	4a0d      	ldr	r2, [pc, #52]	@ (800032c <getKeyInput+0x150>)
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d102      	bne.n	8000306 <getKeyInput+0x12a>
  						  //subKeyProcess();
  						button1_long_pressed = 1;
 8000300:	4b0d      	ldr	r3, [pc, #52]	@ (8000338 <getKeyInput+0x15c>)
 8000302:	2201      	movs	r2, #1
 8000304:	601a      	str	r2, [r3, #0]
  	  for (int i = 0; i < 4; i++) {
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	3301      	adds	r3, #1
 800030a:	603b      	str	r3, [r7, #0]
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	2b03      	cmp	r3, #3
 8000310:	dda3      	ble.n	800025a <getKeyInput+0x7e>
  					  }
  				  }
  			  }
  		  }
  	  }
}
 8000312:	bf00      	nop
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000010 	.word	0x20000010
 8000320:	20000020 	.word	0x20000020
 8000324:	20000000 	.word	0x20000000
 8000328:	40010c00 	.word	0x40010c00
 800032c:	20000030 	.word	0x20000030
 8000330:	20000040 	.word	0x20000040
 8000334:	20000098 	.word	0x20000098
 8000338:	20000094 	.word	0x20000094

0800033c <fsm_automatic_run>:
int time;
int time2;
int led = 1;
int timea, timeb, time2a, time2b;

void fsm_automatic_run() {
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	switch(status) {
 8000340:	4ba0      	ldr	r3, [pc, #640]	@ (80005c4 <fsm_automatic_run+0x288>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	3b01      	subs	r3, #1
 8000346:	2b04      	cmp	r3, #4
 8000348:	f200 8370 	bhi.w	8000a2c <fsm_automatic_run+0x6f0>
 800034c:	a201      	add	r2, pc, #4	@ (adr r2, 8000354 <fsm_automatic_run+0x18>)
 800034e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000352:	bf00      	nop
 8000354:	08000369 	.word	0x08000369
 8000358:	080003bf 	.word	0x080003bf
 800035c:	08000531 	.word	0x08000531
 8000360:	080006f7 	.word	0x080006f7
 8000364:	080008a9 	.word	0x080008a9
	case INIT:
		//TODO
		time = red/1000;
 8000368:	4b97      	ldr	r3, [pc, #604]	@ (80005c8 <fsm_automatic_run+0x28c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a97      	ldr	r2, [pc, #604]	@ (80005cc <fsm_automatic_run+0x290>)
 800036e:	fb82 1203 	smull	r1, r2, r2, r3
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	17db      	asrs	r3, r3, #31
 8000376:	1ad3      	subs	r3, r2, r3
 8000378:	4a95      	ldr	r2, [pc, #596]	@ (80005d0 <fsm_automatic_run+0x294>)
 800037a:	6013      	str	r3, [r2, #0]
		time2 = green/1000;
 800037c:	4b95      	ldr	r3, [pc, #596]	@ (80005d4 <fsm_automatic_run+0x298>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a92      	ldr	r2, [pc, #584]	@ (80005cc <fsm_automatic_run+0x290>)
 8000382:	fb82 1203 	smull	r1, r2, r2, r3
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	17db      	asrs	r3, r3, #31
 800038a:	1ad3      	subs	r3, r2, r3
 800038c:	4a92      	ldr	r2, [pc, #584]	@ (80005d8 <fsm_automatic_run+0x29c>)
 800038e:	6013      	str	r3, [r2, #0]
		INIT_LIGHT();
 8000390:	f001 fa18 	bl	80017c4 <INIT_LIGHT>
		init_segment();
 8000394:	f000 fe36 	bl	8001004 <init_segment>
		status = RED_GREEN;
 8000398:	4b8a      	ldr	r3, [pc, #552]	@ (80005c4 <fsm_automatic_run+0x288>)
 800039a:	2202      	movs	r2, #2
 800039c:	601a      	str	r2, [r3, #0]
		setTimer(0,SCAN_TIME);
 800039e:	21fa      	movs	r1, #250	@ 0xfa
 80003a0:	2000      	movs	r0, #0
 80003a2:	f001 f92d 	bl	8001600 <setTimer>
		setTimer(1,green);
 80003a6:	4b8b      	ldr	r3, [pc, #556]	@ (80005d4 <fsm_automatic_run+0x298>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4619      	mov	r1, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	f001 f927 	bl	8001600 <setTimer>
		setTimer(2,1000);
 80003b2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80003b6:	2002      	movs	r0, #2
 80003b8:	f001 f922 	bl	8001600 <setTimer>
		break;
 80003bc:	e33f      	b.n	8000a3e <fsm_automatic_run+0x702>
	case RED_GREEN:
		//TODO
		timea = time/10; timeb = time%10;
 80003be:	4b84      	ldr	r3, [pc, #528]	@ (80005d0 <fsm_automatic_run+0x294>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a86      	ldr	r2, [pc, #536]	@ (80005dc <fsm_automatic_run+0x2a0>)
 80003c4:	fb82 1203 	smull	r1, r2, r2, r3
 80003c8:	1092      	asrs	r2, r2, #2
 80003ca:	17db      	asrs	r3, r3, #31
 80003cc:	1ad3      	subs	r3, r2, r3
 80003ce:	4a84      	ldr	r2, [pc, #528]	@ (80005e0 <fsm_automatic_run+0x2a4>)
 80003d0:	6013      	str	r3, [r2, #0]
 80003d2:	4b7f      	ldr	r3, [pc, #508]	@ (80005d0 <fsm_automatic_run+0x294>)
 80003d4:	6819      	ldr	r1, [r3, #0]
 80003d6:	4b81      	ldr	r3, [pc, #516]	@ (80005dc <fsm_automatic_run+0x2a0>)
 80003d8:	fb83 2301 	smull	r2, r3, r3, r1
 80003dc:	109a      	asrs	r2, r3, #2
 80003de:	17cb      	asrs	r3, r1, #31
 80003e0:	1ad2      	subs	r2, r2, r3
 80003e2:	4613      	mov	r3, r2
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	4413      	add	r3, r2
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	1aca      	subs	r2, r1, r3
 80003ec:	4b7d      	ldr	r3, [pc, #500]	@ (80005e4 <fsm_automatic_run+0x2a8>)
 80003ee:	601a      	str	r2, [r3, #0]
		time2a = time2/10; time2b = time2%10;
 80003f0:	4b79      	ldr	r3, [pc, #484]	@ (80005d8 <fsm_automatic_run+0x29c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a79      	ldr	r2, [pc, #484]	@ (80005dc <fsm_automatic_run+0x2a0>)
 80003f6:	fb82 1203 	smull	r1, r2, r2, r3
 80003fa:	1092      	asrs	r2, r2, #2
 80003fc:	17db      	asrs	r3, r3, #31
 80003fe:	1ad3      	subs	r3, r2, r3
 8000400:	4a79      	ldr	r2, [pc, #484]	@ (80005e8 <fsm_automatic_run+0x2ac>)
 8000402:	6013      	str	r3, [r2, #0]
 8000404:	4b74      	ldr	r3, [pc, #464]	@ (80005d8 <fsm_automatic_run+0x29c>)
 8000406:	6819      	ldr	r1, [r3, #0]
 8000408:	4b74      	ldr	r3, [pc, #464]	@ (80005dc <fsm_automatic_run+0x2a0>)
 800040a:	fb83 2301 	smull	r2, r3, r3, r1
 800040e:	109a      	asrs	r2, r3, #2
 8000410:	17cb      	asrs	r3, r1, #31
 8000412:	1ad2      	subs	r2, r2, r3
 8000414:	4613      	mov	r3, r2
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	4413      	add	r3, r2
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	1aca      	subs	r2, r1, r3
 800041e:	4b73      	ldr	r3, [pc, #460]	@ (80005ec <fsm_automatic_run+0x2b0>)
 8000420:	601a      	str	r2, [r3, #0]
		led7_seg1(led, (led==1)?timea:timeb);
 8000422:	4b73      	ldr	r3, [pc, #460]	@ (80005f0 <fsm_automatic_run+0x2b4>)
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	4b72      	ldr	r3, [pc, #456]	@ (80005f0 <fsm_automatic_run+0x2b4>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d102      	bne.n	8000434 <fsm_automatic_run+0xf8>
 800042e:	4b6c      	ldr	r3, [pc, #432]	@ (80005e0 <fsm_automatic_run+0x2a4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	e001      	b.n	8000438 <fsm_automatic_run+0xfc>
 8000434:	4b6b      	ldr	r3, [pc, #428]	@ (80005e4 <fsm_automatic_run+0x2a8>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4619      	mov	r1, r3
 800043a:	4610      	mov	r0, r2
 800043c:	f000 ff4c 	bl	80012d8 <led7_seg1>
		led7_seg2(led, (led==1)?time2a:time2b);
 8000440:	4b6b      	ldr	r3, [pc, #428]	@ (80005f0 <fsm_automatic_run+0x2b4>)
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	4b6a      	ldr	r3, [pc, #424]	@ (80005f0 <fsm_automatic_run+0x2b4>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d102      	bne.n	8000452 <fsm_automatic_run+0x116>
 800044c:	4b66      	ldr	r3, [pc, #408]	@ (80005e8 <fsm_automatic_run+0x2ac>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	e001      	b.n	8000456 <fsm_automatic_run+0x11a>
 8000452:	4b66      	ldr	r3, [pc, #408]	@ (80005ec <fsm_automatic_run+0x2b0>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4619      	mov	r1, r3
 8000458:	4610      	mov	r0, r2
 800045a:	f000 ff69 	bl	8001330 <led7_seg2>
		LIGHT_RED_GREEN();
 800045e:	f001 f9f7 	bl	8001850 <LIGHT_RED_GREEN>
		if (timer_flag[0] == 1) {
 8000462:	4b64      	ldr	r3, [pc, #400]	@ (80005f4 <fsm_automatic_run+0x2b8>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d10c      	bne.n	8000484 <fsm_automatic_run+0x148>
			led = led == 1 ? 2 : 1;
 800046a:	4b61      	ldr	r3, [pc, #388]	@ (80005f0 <fsm_automatic_run+0x2b4>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d101      	bne.n	8000476 <fsm_automatic_run+0x13a>
 8000472:	2302      	movs	r3, #2
 8000474:	e000      	b.n	8000478 <fsm_automatic_run+0x13c>
 8000476:	2301      	movs	r3, #1
 8000478:	4a5d      	ldr	r2, [pc, #372]	@ (80005f0 <fsm_automatic_run+0x2b4>)
 800047a:	6013      	str	r3, [r2, #0]
			setTimer(0,SCAN_TIME);
 800047c:	21fa      	movs	r1, #250	@ 0xfa
 800047e:	2000      	movs	r0, #0
 8000480:	f001 f8be 	bl	8001600 <setTimer>
		}
		if (timer_flag[2] == 1) {
 8000484:	4b5b      	ldr	r3, [pc, #364]	@ (80005f4 <fsm_automatic_run+0x2b8>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d10e      	bne.n	80004aa <fsm_automatic_run+0x16e>
			time--;
 800048c:	4b50      	ldr	r3, [pc, #320]	@ (80005d0 <fsm_automatic_run+0x294>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3b01      	subs	r3, #1
 8000492:	4a4f      	ldr	r2, [pc, #316]	@ (80005d0 <fsm_automatic_run+0x294>)
 8000494:	6013      	str	r3, [r2, #0]
			time2--;
 8000496:	4b50      	ldr	r3, [pc, #320]	@ (80005d8 <fsm_automatic_run+0x29c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	3b01      	subs	r3, #1
 800049c:	4a4e      	ldr	r2, [pc, #312]	@ (80005d8 <fsm_automatic_run+0x29c>)
 800049e:	6013      	str	r3, [r2, #0]
			setTimer(2,1000);
 80004a0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80004a4:	2002      	movs	r0, #2
 80004a6:	f001 f8ab 	bl	8001600 <setTimer>
		}
		if (timer_flag[1] == 1) {
 80004aa:	4b52      	ldr	r3, [pc, #328]	@ (80005f4 <fsm_automatic_run+0x2b8>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d112      	bne.n	80004d8 <fsm_automatic_run+0x19c>
			status = RED_YELOW;
 80004b2:	4b44      	ldr	r3, [pc, #272]	@ (80005c4 <fsm_automatic_run+0x288>)
 80004b4:	2203      	movs	r2, #3
 80004b6:	601a      	str	r2, [r3, #0]
			setTimer(1,yelow);
 80004b8:	4b4f      	ldr	r3, [pc, #316]	@ (80005f8 <fsm_automatic_run+0x2bc>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4619      	mov	r1, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	f001 f89e 	bl	8001600 <setTimer>
			time2 = yelow/1000;
 80004c4:	4b4c      	ldr	r3, [pc, #304]	@ (80005f8 <fsm_automatic_run+0x2bc>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a40      	ldr	r2, [pc, #256]	@ (80005cc <fsm_automatic_run+0x290>)
 80004ca:	fb82 1203 	smull	r1, r2, r2, r3
 80004ce:	1192      	asrs	r2, r2, #6
 80004d0:	17db      	asrs	r3, r3, #31
 80004d2:	1ad3      	subs	r3, r2, r3
 80004d4:	4a40      	ldr	r2, [pc, #256]	@ (80005d8 <fsm_automatic_run+0x29c>)
 80004d6:	6013      	str	r3, [r2, #0]
		}
		if (isModePressed() == 1) {
 80004d8:	f7ff fe4a 	bl	8000170 <isModePressed>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d110      	bne.n	8000504 <fsm_automatic_run+0x1c8>
			init_segment();
 80004e2:	f000 fd8f 	bl	8001004 <init_segment>
			status = MAN_RED_GREEN;
 80004e6:	4b37      	ldr	r3, [pc, #220]	@ (80005c4 <fsm_automatic_run+0x288>)
 80004e8:	220a      	movs	r2, #10
 80004ea:	601a      	str	r2, [r3, #0]
			current_status = RED_GREEN;
 80004ec:	4b43      	ldr	r3, [pc, #268]	@ (80005fc <fsm_automatic_run+0x2c0>)
 80004ee:	2202      	movs	r2, #2
 80004f0:	601a      	str	r2, [r3, #0]
			current_time = time < time2 ? time : time2;
 80004f2:	4b39      	ldr	r3, [pc, #228]	@ (80005d8 <fsm_automatic_run+0x29c>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	4b36      	ldr	r3, [pc, #216]	@ (80005d0 <fsm_automatic_run+0x294>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4293      	cmp	r3, r2
 80004fc:	bfa8      	it	ge
 80004fe:	4613      	movge	r3, r2
 8000500:	4a3f      	ldr	r2, [pc, #252]	@ (8000600 <fsm_automatic_run+0x2c4>)
 8000502:	6013      	str	r3, [r2, #0]
		}
		if (isApplyPressed() == 1) {
 8000504:	f7ff fe22 	bl	800014c <isApplyPressed>
 8000508:	4603      	mov	r3, r0
 800050a:	2b01      	cmp	r3, #1
 800050c:	f040 8290 	bne.w	8000a30 <fsm_automatic_run+0x6f4>
			current_status = RED_GREEN;
 8000510:	4b3a      	ldr	r3, [pc, #232]	@ (80005fc <fsm_automatic_run+0x2c0>)
 8000512:	2202      	movs	r2, #2
 8000514:	601a      	str	r2, [r3, #0]
			current_time = time < time2 ? time : time2;
 8000516:	4b30      	ldr	r3, [pc, #192]	@ (80005d8 <fsm_automatic_run+0x29c>)
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	4b2d      	ldr	r3, [pc, #180]	@ (80005d0 <fsm_automatic_run+0x294>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4293      	cmp	r3, r2
 8000520:	bfa8      	it	ge
 8000522:	4613      	movge	r3, r2
 8000524:	4a36      	ldr	r2, [pc, #216]	@ (8000600 <fsm_automatic_run+0x2c4>)
 8000526:	6013      	str	r3, [r2, #0]
			status = SETTING;
 8000528:	4b26      	ldr	r3, [pc, #152]	@ (80005c4 <fsm_automatic_run+0x288>)
 800052a:	2213      	movs	r2, #19
 800052c:	601a      	str	r2, [r3, #0]
		}
		break;
 800052e:	e27f      	b.n	8000a30 <fsm_automatic_run+0x6f4>
	case RED_YELOW:
		//TODO
		timea = time/10; timeb = time%10;
 8000530:	4b27      	ldr	r3, [pc, #156]	@ (80005d0 <fsm_automatic_run+0x294>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a29      	ldr	r2, [pc, #164]	@ (80005dc <fsm_automatic_run+0x2a0>)
 8000536:	fb82 1203 	smull	r1, r2, r2, r3
 800053a:	1092      	asrs	r2, r2, #2
 800053c:	17db      	asrs	r3, r3, #31
 800053e:	1ad3      	subs	r3, r2, r3
 8000540:	4a27      	ldr	r2, [pc, #156]	@ (80005e0 <fsm_automatic_run+0x2a4>)
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4b22      	ldr	r3, [pc, #136]	@ (80005d0 <fsm_automatic_run+0x294>)
 8000546:	6819      	ldr	r1, [r3, #0]
 8000548:	4b24      	ldr	r3, [pc, #144]	@ (80005dc <fsm_automatic_run+0x2a0>)
 800054a:	fb83 2301 	smull	r2, r3, r3, r1
 800054e:	109a      	asrs	r2, r3, #2
 8000550:	17cb      	asrs	r3, r1, #31
 8000552:	1ad2      	subs	r2, r2, r3
 8000554:	4613      	mov	r3, r2
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	4413      	add	r3, r2
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	1aca      	subs	r2, r1, r3
 800055e:	4b21      	ldr	r3, [pc, #132]	@ (80005e4 <fsm_automatic_run+0x2a8>)
 8000560:	601a      	str	r2, [r3, #0]
		time2a = time2/10; time2b = time2%10;
 8000562:	4b1d      	ldr	r3, [pc, #116]	@ (80005d8 <fsm_automatic_run+0x29c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a1d      	ldr	r2, [pc, #116]	@ (80005dc <fsm_automatic_run+0x2a0>)
 8000568:	fb82 1203 	smull	r1, r2, r2, r3
 800056c:	1092      	asrs	r2, r2, #2
 800056e:	17db      	asrs	r3, r3, #31
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	4a1d      	ldr	r2, [pc, #116]	@ (80005e8 <fsm_automatic_run+0x2ac>)
 8000574:	6013      	str	r3, [r2, #0]
 8000576:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <fsm_automatic_run+0x29c>)
 8000578:	6819      	ldr	r1, [r3, #0]
 800057a:	4b18      	ldr	r3, [pc, #96]	@ (80005dc <fsm_automatic_run+0x2a0>)
 800057c:	fb83 2301 	smull	r2, r3, r3, r1
 8000580:	109a      	asrs	r2, r3, #2
 8000582:	17cb      	asrs	r3, r1, #31
 8000584:	1ad2      	subs	r2, r2, r3
 8000586:	4613      	mov	r3, r2
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	1aca      	subs	r2, r1, r3
 8000590:	4b16      	ldr	r3, [pc, #88]	@ (80005ec <fsm_automatic_run+0x2b0>)
 8000592:	601a      	str	r2, [r3, #0]
		led7_seg1(led, (led==1)?timea:timeb);
 8000594:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <fsm_automatic_run+0x2b4>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b15      	ldr	r3, [pc, #84]	@ (80005f0 <fsm_automatic_run+0x2b4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d102      	bne.n	80005a6 <fsm_automatic_run+0x26a>
 80005a0:	4b0f      	ldr	r3, [pc, #60]	@ (80005e0 <fsm_automatic_run+0x2a4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	e001      	b.n	80005aa <fsm_automatic_run+0x26e>
 80005a6:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <fsm_automatic_run+0x2a8>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4619      	mov	r1, r3
 80005ac:	4610      	mov	r0, r2
 80005ae:	f000 fe93 	bl	80012d8 <led7_seg1>
		led7_seg2(led, (led==1)?time2a:time2b);
 80005b2:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <fsm_automatic_run+0x2b4>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <fsm_automatic_run+0x2b4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d122      	bne.n	8000604 <fsm_automatic_run+0x2c8>
 80005be:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <fsm_automatic_run+0x2ac>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	e021      	b.n	8000608 <fsm_automatic_run+0x2cc>
 80005c4:	20000058 	.word	0x20000058
 80005c8:	2000005c 	.word	0x2000005c
 80005cc:	10624dd3 	.word	0x10624dd3
 80005d0:	200000a8 	.word	0x200000a8
 80005d4:	20000064 	.word	0x20000064
 80005d8:	200000ac 	.word	0x200000ac
 80005dc:	66666667 	.word	0x66666667
 80005e0:	200000b0 	.word	0x200000b0
 80005e4:	200000b4 	.word	0x200000b4
 80005e8:	200000b8 	.word	0x200000b8
 80005ec:	200000bc 	.word	0x200000bc
 80005f0:	20000050 	.word	0x20000050
 80005f4:	20000124 	.word	0x20000124
 80005f8:	20000060 	.word	0x20000060
 80005fc:	20000068 	.word	0x20000068
 8000600:	200000d8 	.word	0x200000d8
 8000604:	4b98      	ldr	r3, [pc, #608]	@ (8000868 <fsm_automatic_run+0x52c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4619      	mov	r1, r3
 800060a:	4610      	mov	r0, r2
 800060c:	f000 fe90 	bl	8001330 <led7_seg2>
		LIGHT_RED_YELOW();
 8000610:	f001 f964 	bl	80018dc <LIGHT_RED_YELOW>
		if (timer_flag[0] == 1) {
 8000614:	4b95      	ldr	r3, [pc, #596]	@ (800086c <fsm_automatic_run+0x530>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d10c      	bne.n	8000636 <fsm_automatic_run+0x2fa>
			led = led == 1 ? 2 : 1;
 800061c:	4b94      	ldr	r3, [pc, #592]	@ (8000870 <fsm_automatic_run+0x534>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d101      	bne.n	8000628 <fsm_automatic_run+0x2ec>
 8000624:	2302      	movs	r3, #2
 8000626:	e000      	b.n	800062a <fsm_automatic_run+0x2ee>
 8000628:	2301      	movs	r3, #1
 800062a:	4a91      	ldr	r2, [pc, #580]	@ (8000870 <fsm_automatic_run+0x534>)
 800062c:	6013      	str	r3, [r2, #0]
			setTimer(0,SCAN_TIME);
 800062e:	21fa      	movs	r1, #250	@ 0xfa
 8000630:	2000      	movs	r0, #0
 8000632:	f000 ffe5 	bl	8001600 <setTimer>
		}
		if (timer_flag[2] == 1) {
 8000636:	4b8d      	ldr	r3, [pc, #564]	@ (800086c <fsm_automatic_run+0x530>)
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d10e      	bne.n	800065c <fsm_automatic_run+0x320>
			time--;
 800063e:	4b8d      	ldr	r3, [pc, #564]	@ (8000874 <fsm_automatic_run+0x538>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	3b01      	subs	r3, #1
 8000644:	4a8b      	ldr	r2, [pc, #556]	@ (8000874 <fsm_automatic_run+0x538>)
 8000646:	6013      	str	r3, [r2, #0]
			time2--;
 8000648:	4b8b      	ldr	r3, [pc, #556]	@ (8000878 <fsm_automatic_run+0x53c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3b01      	subs	r3, #1
 800064e:	4a8a      	ldr	r2, [pc, #552]	@ (8000878 <fsm_automatic_run+0x53c>)
 8000650:	6013      	str	r3, [r2, #0]
			setTimer(2,1000);
 8000652:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000656:	2002      	movs	r0, #2
 8000658:	f000 ffd2 	bl	8001600 <setTimer>
		}
		if (timer_flag[1] == 1) {
 800065c:	4b83      	ldr	r3, [pc, #524]	@ (800086c <fsm_automatic_run+0x530>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d11c      	bne.n	800069e <fsm_automatic_run+0x362>
			status = GREEN_RED;
 8000664:	4b85      	ldr	r3, [pc, #532]	@ (800087c <fsm_automatic_run+0x540>)
 8000666:	2204      	movs	r2, #4
 8000668:	601a      	str	r2, [r3, #0]
			setTimer(1,green);
 800066a:	4b85      	ldr	r3, [pc, #532]	@ (8000880 <fsm_automatic_run+0x544>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4619      	mov	r1, r3
 8000670:	2001      	movs	r0, #1
 8000672:	f000 ffc5 	bl	8001600 <setTimer>
			time = green/1000;
 8000676:	4b82      	ldr	r3, [pc, #520]	@ (8000880 <fsm_automatic_run+0x544>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a82      	ldr	r2, [pc, #520]	@ (8000884 <fsm_automatic_run+0x548>)
 800067c:	fb82 1203 	smull	r1, r2, r2, r3
 8000680:	1192      	asrs	r2, r2, #6
 8000682:	17db      	asrs	r3, r3, #31
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	4a7b      	ldr	r2, [pc, #492]	@ (8000874 <fsm_automatic_run+0x538>)
 8000688:	6013      	str	r3, [r2, #0]
			time2 = red/1000;
 800068a:	4b7f      	ldr	r3, [pc, #508]	@ (8000888 <fsm_automatic_run+0x54c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a7d      	ldr	r2, [pc, #500]	@ (8000884 <fsm_automatic_run+0x548>)
 8000690:	fb82 1203 	smull	r1, r2, r2, r3
 8000694:	1192      	asrs	r2, r2, #6
 8000696:	17db      	asrs	r3, r3, #31
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	4a77      	ldr	r2, [pc, #476]	@ (8000878 <fsm_automatic_run+0x53c>)
 800069c:	6013      	str	r3, [r2, #0]
		}
		if (isModePressed() == 1) {
 800069e:	f7ff fd67 	bl	8000170 <isModePressed>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d110      	bne.n	80006ca <fsm_automatic_run+0x38e>
			init_segment();
 80006a8:	f000 fcac 	bl	8001004 <init_segment>
			status = MAN_RED_YELOW;
 80006ac:	4b73      	ldr	r3, [pc, #460]	@ (800087c <fsm_automatic_run+0x540>)
 80006ae:	220b      	movs	r2, #11
 80006b0:	601a      	str	r2, [r3, #0]
			current_status = RED_YELOW;
 80006b2:	4b76      	ldr	r3, [pc, #472]	@ (800088c <fsm_automatic_run+0x550>)
 80006b4:	2203      	movs	r2, #3
 80006b6:	601a      	str	r2, [r3, #0]
			current_time = time < time2 ? time : time2;
 80006b8:	4b6f      	ldr	r3, [pc, #444]	@ (8000878 <fsm_automatic_run+0x53c>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b6d      	ldr	r3, [pc, #436]	@ (8000874 <fsm_automatic_run+0x538>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4293      	cmp	r3, r2
 80006c2:	bfa8      	it	ge
 80006c4:	4613      	movge	r3, r2
 80006c6:	4a72      	ldr	r2, [pc, #456]	@ (8000890 <fsm_automatic_run+0x554>)
 80006c8:	6013      	str	r3, [r2, #0]
		}
		if (isApplyPressed() == 1) {
 80006ca:	f7ff fd3f 	bl	800014c <isApplyPressed>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	f040 81af 	bne.w	8000a34 <fsm_automatic_run+0x6f8>
			current_status = RED_GREEN;
 80006d6:	4b6d      	ldr	r3, [pc, #436]	@ (800088c <fsm_automatic_run+0x550>)
 80006d8:	2202      	movs	r2, #2
 80006da:	601a      	str	r2, [r3, #0]
			current_time = time < time2 ? time : time2;
 80006dc:	4b66      	ldr	r3, [pc, #408]	@ (8000878 <fsm_automatic_run+0x53c>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b64      	ldr	r3, [pc, #400]	@ (8000874 <fsm_automatic_run+0x538>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4293      	cmp	r3, r2
 80006e6:	bfa8      	it	ge
 80006e8:	4613      	movge	r3, r2
 80006ea:	4a69      	ldr	r2, [pc, #420]	@ (8000890 <fsm_automatic_run+0x554>)
 80006ec:	6013      	str	r3, [r2, #0]
			status = SETTING;
 80006ee:	4b63      	ldr	r3, [pc, #396]	@ (800087c <fsm_automatic_run+0x540>)
 80006f0:	2213      	movs	r2, #19
 80006f2:	601a      	str	r2, [r3, #0]
		}
		break;
 80006f4:	e19e      	b.n	8000a34 <fsm_automatic_run+0x6f8>
	case GREEN_RED:
		//TODO
		timea = time/10; timeb = time%10;
 80006f6:	4b5f      	ldr	r3, [pc, #380]	@ (8000874 <fsm_automatic_run+0x538>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a66      	ldr	r2, [pc, #408]	@ (8000894 <fsm_automatic_run+0x558>)
 80006fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000700:	1092      	asrs	r2, r2, #2
 8000702:	17db      	asrs	r3, r3, #31
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	4a64      	ldr	r2, [pc, #400]	@ (8000898 <fsm_automatic_run+0x55c>)
 8000708:	6013      	str	r3, [r2, #0]
 800070a:	4b5a      	ldr	r3, [pc, #360]	@ (8000874 <fsm_automatic_run+0x538>)
 800070c:	6819      	ldr	r1, [r3, #0]
 800070e:	4b61      	ldr	r3, [pc, #388]	@ (8000894 <fsm_automatic_run+0x558>)
 8000710:	fb83 2301 	smull	r2, r3, r3, r1
 8000714:	109a      	asrs	r2, r3, #2
 8000716:	17cb      	asrs	r3, r1, #31
 8000718:	1ad2      	subs	r2, r2, r3
 800071a:	4613      	mov	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	1aca      	subs	r2, r1, r3
 8000724:	4b5d      	ldr	r3, [pc, #372]	@ (800089c <fsm_automatic_run+0x560>)
 8000726:	601a      	str	r2, [r3, #0]
		time2a = time2/10; time2b = time2%10;
 8000728:	4b53      	ldr	r3, [pc, #332]	@ (8000878 <fsm_automatic_run+0x53c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a59      	ldr	r2, [pc, #356]	@ (8000894 <fsm_automatic_run+0x558>)
 800072e:	fb82 1203 	smull	r1, r2, r2, r3
 8000732:	1092      	asrs	r2, r2, #2
 8000734:	17db      	asrs	r3, r3, #31
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	4a59      	ldr	r2, [pc, #356]	@ (80008a0 <fsm_automatic_run+0x564>)
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b4e      	ldr	r3, [pc, #312]	@ (8000878 <fsm_automatic_run+0x53c>)
 800073e:	6819      	ldr	r1, [r3, #0]
 8000740:	4b54      	ldr	r3, [pc, #336]	@ (8000894 <fsm_automatic_run+0x558>)
 8000742:	fb83 2301 	smull	r2, r3, r3, r1
 8000746:	109a      	asrs	r2, r3, #2
 8000748:	17cb      	asrs	r3, r1, #31
 800074a:	1ad2      	subs	r2, r2, r3
 800074c:	4613      	mov	r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	4413      	add	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	1aca      	subs	r2, r1, r3
 8000756:	4b44      	ldr	r3, [pc, #272]	@ (8000868 <fsm_automatic_run+0x52c>)
 8000758:	601a      	str	r2, [r3, #0]
		led7_seg1(led, (led==1)?timea:timeb);
 800075a:	4b45      	ldr	r3, [pc, #276]	@ (8000870 <fsm_automatic_run+0x534>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b44      	ldr	r3, [pc, #272]	@ (8000870 <fsm_automatic_run+0x534>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d102      	bne.n	800076c <fsm_automatic_run+0x430>
 8000766:	4b4c      	ldr	r3, [pc, #304]	@ (8000898 <fsm_automatic_run+0x55c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	e001      	b.n	8000770 <fsm_automatic_run+0x434>
 800076c:	4b4b      	ldr	r3, [pc, #300]	@ (800089c <fsm_automatic_run+0x560>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	4610      	mov	r0, r2
 8000774:	f000 fdb0 	bl	80012d8 <led7_seg1>
		led7_seg2(led, (led==1)?time2a:time2b);
 8000778:	4b3d      	ldr	r3, [pc, #244]	@ (8000870 <fsm_automatic_run+0x534>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b3c      	ldr	r3, [pc, #240]	@ (8000870 <fsm_automatic_run+0x534>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d102      	bne.n	800078a <fsm_automatic_run+0x44e>
 8000784:	4b46      	ldr	r3, [pc, #280]	@ (80008a0 <fsm_automatic_run+0x564>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	e001      	b.n	800078e <fsm_automatic_run+0x452>
 800078a:	4b37      	ldr	r3, [pc, #220]	@ (8000868 <fsm_automatic_run+0x52c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4619      	mov	r1, r3
 8000790:	4610      	mov	r0, r2
 8000792:	f000 fdcd 	bl	8001330 <led7_seg2>
		LIGHT_GREEN_RED();
 8000796:	f001 f8e7 	bl	8001968 <LIGHT_GREEN_RED>
		if (timer_flag[0] == 1) {
 800079a:	4b34      	ldr	r3, [pc, #208]	@ (800086c <fsm_automatic_run+0x530>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d10c      	bne.n	80007bc <fsm_automatic_run+0x480>
			led = led == 1 ? 2 : 1;
 80007a2:	4b33      	ldr	r3, [pc, #204]	@ (8000870 <fsm_automatic_run+0x534>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d101      	bne.n	80007ae <fsm_automatic_run+0x472>
 80007aa:	2302      	movs	r3, #2
 80007ac:	e000      	b.n	80007b0 <fsm_automatic_run+0x474>
 80007ae:	2301      	movs	r3, #1
 80007b0:	4a2f      	ldr	r2, [pc, #188]	@ (8000870 <fsm_automatic_run+0x534>)
 80007b2:	6013      	str	r3, [r2, #0]
			setTimer(0,SCAN_TIME);
 80007b4:	21fa      	movs	r1, #250	@ 0xfa
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 ff22 	bl	8001600 <setTimer>
		}
		if (timer_flag[2] == 1) {
 80007bc:	4b2b      	ldr	r3, [pc, #172]	@ (800086c <fsm_automatic_run+0x530>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d10e      	bne.n	80007e2 <fsm_automatic_run+0x4a6>
			time--;
 80007c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000874 <fsm_automatic_run+0x538>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	3b01      	subs	r3, #1
 80007ca:	4a2a      	ldr	r2, [pc, #168]	@ (8000874 <fsm_automatic_run+0x538>)
 80007cc:	6013      	str	r3, [r2, #0]
			time2--;
 80007ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000878 <fsm_automatic_run+0x53c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	4a28      	ldr	r2, [pc, #160]	@ (8000878 <fsm_automatic_run+0x53c>)
 80007d6:	6013      	str	r3, [r2, #0]
			setTimer(2,1000);
 80007d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007dc:	2002      	movs	r0, #2
 80007de:	f000 ff0f 	bl	8001600 <setTimer>
		}
		if (timer_flag[1] == 1) {
 80007e2:	4b22      	ldr	r3, [pc, #136]	@ (800086c <fsm_automatic_run+0x530>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d112      	bne.n	8000810 <fsm_automatic_run+0x4d4>
			status = YELOW_RED;
 80007ea:	4b24      	ldr	r3, [pc, #144]	@ (800087c <fsm_automatic_run+0x540>)
 80007ec:	2205      	movs	r2, #5
 80007ee:	601a      	str	r2, [r3, #0]
			setTimer(1,yelow);
 80007f0:	4b2c      	ldr	r3, [pc, #176]	@ (80008a4 <fsm_automatic_run+0x568>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	2001      	movs	r0, #1
 80007f8:	f000 ff02 	bl	8001600 <setTimer>
			time = yelow/1000;
 80007fc:	4b29      	ldr	r3, [pc, #164]	@ (80008a4 <fsm_automatic_run+0x568>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a20      	ldr	r2, [pc, #128]	@ (8000884 <fsm_automatic_run+0x548>)
 8000802:	fb82 1203 	smull	r1, r2, r2, r3
 8000806:	1192      	asrs	r2, r2, #6
 8000808:	17db      	asrs	r3, r3, #31
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	4a19      	ldr	r2, [pc, #100]	@ (8000874 <fsm_automatic_run+0x538>)
 800080e:	6013      	str	r3, [r2, #0]
		}
		if (isModePressed() == 1) {
 8000810:	f7ff fcae 	bl	8000170 <isModePressed>
 8000814:	4603      	mov	r3, r0
 8000816:	2b01      	cmp	r3, #1
 8000818:	d110      	bne.n	800083c <fsm_automatic_run+0x500>
			init_segment();
 800081a:	f000 fbf3 	bl	8001004 <init_segment>
			status = MAN_GREEN_RED;
 800081e:	4b17      	ldr	r3, [pc, #92]	@ (800087c <fsm_automatic_run+0x540>)
 8000820:	220c      	movs	r2, #12
 8000822:	601a      	str	r2, [r3, #0]
			current_status = GREEN_RED;
 8000824:	4b19      	ldr	r3, [pc, #100]	@ (800088c <fsm_automatic_run+0x550>)
 8000826:	2204      	movs	r2, #4
 8000828:	601a      	str	r2, [r3, #0]
			current_time = time < time2 ? time : time2;
 800082a:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <fsm_automatic_run+0x53c>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <fsm_automatic_run+0x538>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4293      	cmp	r3, r2
 8000834:	bfa8      	it	ge
 8000836:	4613      	movge	r3, r2
 8000838:	4a15      	ldr	r2, [pc, #84]	@ (8000890 <fsm_automatic_run+0x554>)
 800083a:	6013      	str	r3, [r2, #0]
		}
		if (isApplyPressed() == 1) {
 800083c:	f7ff fc86 	bl	800014c <isApplyPressed>
 8000840:	4603      	mov	r3, r0
 8000842:	2b01      	cmp	r3, #1
 8000844:	f040 80f8 	bne.w	8000a38 <fsm_automatic_run+0x6fc>
			current_status = RED_GREEN;
 8000848:	4b10      	ldr	r3, [pc, #64]	@ (800088c <fsm_automatic_run+0x550>)
 800084a:	2202      	movs	r2, #2
 800084c:	601a      	str	r2, [r3, #0]
			current_time = time < time2 ? time : time2;
 800084e:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <fsm_automatic_run+0x53c>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <fsm_automatic_run+0x538>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4293      	cmp	r3, r2
 8000858:	bfa8      	it	ge
 800085a:	4613      	movge	r3, r2
 800085c:	4a0c      	ldr	r2, [pc, #48]	@ (8000890 <fsm_automatic_run+0x554>)
 800085e:	6013      	str	r3, [r2, #0]
			status = SETTING;
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <fsm_automatic_run+0x540>)
 8000862:	2213      	movs	r2, #19
 8000864:	601a      	str	r2, [r3, #0]
		}
		break;
 8000866:	e0e7      	b.n	8000a38 <fsm_automatic_run+0x6fc>
 8000868:	200000bc 	.word	0x200000bc
 800086c:	20000124 	.word	0x20000124
 8000870:	20000050 	.word	0x20000050
 8000874:	200000a8 	.word	0x200000a8
 8000878:	200000ac 	.word	0x200000ac
 800087c:	20000058 	.word	0x20000058
 8000880:	20000064 	.word	0x20000064
 8000884:	10624dd3 	.word	0x10624dd3
 8000888:	2000005c 	.word	0x2000005c
 800088c:	20000068 	.word	0x20000068
 8000890:	200000d8 	.word	0x200000d8
 8000894:	66666667 	.word	0x66666667
 8000898:	200000b0 	.word	0x200000b0
 800089c:	200000b4 	.word	0x200000b4
 80008a0:	200000b8 	.word	0x200000b8
 80008a4:	20000060 	.word	0x20000060
	case YELOW_RED:
		//TODO
		timea = time/10; timeb = time%10;
 80008a8:	4b66      	ldr	r3, [pc, #408]	@ (8000a44 <fsm_automatic_run+0x708>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a66      	ldr	r2, [pc, #408]	@ (8000a48 <fsm_automatic_run+0x70c>)
 80008ae:	fb82 1203 	smull	r1, r2, r2, r3
 80008b2:	1092      	asrs	r2, r2, #2
 80008b4:	17db      	asrs	r3, r3, #31
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	4a64      	ldr	r2, [pc, #400]	@ (8000a4c <fsm_automatic_run+0x710>)
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	4b61      	ldr	r3, [pc, #388]	@ (8000a44 <fsm_automatic_run+0x708>)
 80008be:	6819      	ldr	r1, [r3, #0]
 80008c0:	4b61      	ldr	r3, [pc, #388]	@ (8000a48 <fsm_automatic_run+0x70c>)
 80008c2:	fb83 2301 	smull	r2, r3, r3, r1
 80008c6:	109a      	asrs	r2, r3, #2
 80008c8:	17cb      	asrs	r3, r1, #31
 80008ca:	1ad2      	subs	r2, r2, r3
 80008cc:	4613      	mov	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	4413      	add	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	1aca      	subs	r2, r1, r3
 80008d6:	4b5e      	ldr	r3, [pc, #376]	@ (8000a50 <fsm_automatic_run+0x714>)
 80008d8:	601a      	str	r2, [r3, #0]
		time2a = time2/10; time2b = time2%10;
 80008da:	4b5e      	ldr	r3, [pc, #376]	@ (8000a54 <fsm_automatic_run+0x718>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a5a      	ldr	r2, [pc, #360]	@ (8000a48 <fsm_automatic_run+0x70c>)
 80008e0:	fb82 1203 	smull	r1, r2, r2, r3
 80008e4:	1092      	asrs	r2, r2, #2
 80008e6:	17db      	asrs	r3, r3, #31
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	4a5b      	ldr	r2, [pc, #364]	@ (8000a58 <fsm_automatic_run+0x71c>)
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	4b59      	ldr	r3, [pc, #356]	@ (8000a54 <fsm_automatic_run+0x718>)
 80008f0:	6819      	ldr	r1, [r3, #0]
 80008f2:	4b55      	ldr	r3, [pc, #340]	@ (8000a48 <fsm_automatic_run+0x70c>)
 80008f4:	fb83 2301 	smull	r2, r3, r3, r1
 80008f8:	109a      	asrs	r2, r3, #2
 80008fa:	17cb      	asrs	r3, r1, #31
 80008fc:	1ad2      	subs	r2, r2, r3
 80008fe:	4613      	mov	r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	1aca      	subs	r2, r1, r3
 8000908:	4b54      	ldr	r3, [pc, #336]	@ (8000a5c <fsm_automatic_run+0x720>)
 800090a:	601a      	str	r2, [r3, #0]
		led7_seg1(led, (led==1)?timea:timeb);
 800090c:	4b54      	ldr	r3, [pc, #336]	@ (8000a60 <fsm_automatic_run+0x724>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b53      	ldr	r3, [pc, #332]	@ (8000a60 <fsm_automatic_run+0x724>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d102      	bne.n	800091e <fsm_automatic_run+0x5e2>
 8000918:	4b4c      	ldr	r3, [pc, #304]	@ (8000a4c <fsm_automatic_run+0x710>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	e001      	b.n	8000922 <fsm_automatic_run+0x5e6>
 800091e:	4b4c      	ldr	r3, [pc, #304]	@ (8000a50 <fsm_automatic_run+0x714>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4619      	mov	r1, r3
 8000924:	4610      	mov	r0, r2
 8000926:	f000 fcd7 	bl	80012d8 <led7_seg1>
		led7_seg2(led, (led==1)?time2a:time2b);
 800092a:	4b4d      	ldr	r3, [pc, #308]	@ (8000a60 <fsm_automatic_run+0x724>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4b4c      	ldr	r3, [pc, #304]	@ (8000a60 <fsm_automatic_run+0x724>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d102      	bne.n	800093c <fsm_automatic_run+0x600>
 8000936:	4b48      	ldr	r3, [pc, #288]	@ (8000a58 <fsm_automatic_run+0x71c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	e001      	b.n	8000940 <fsm_automatic_run+0x604>
 800093c:	4b47      	ldr	r3, [pc, #284]	@ (8000a5c <fsm_automatic_run+0x720>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	4610      	mov	r0, r2
 8000944:	f000 fcf4 	bl	8001330 <led7_seg2>
		LIGHT_YELOW_RED();
 8000948:	f001 f854 	bl	80019f4 <LIGHT_YELOW_RED>
		if (timer_flag[0] == 1) {
 800094c:	4b45      	ldr	r3, [pc, #276]	@ (8000a64 <fsm_automatic_run+0x728>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d10c      	bne.n	800096e <fsm_automatic_run+0x632>
			led = led == 1 ? 2 : 1;
 8000954:	4b42      	ldr	r3, [pc, #264]	@ (8000a60 <fsm_automatic_run+0x724>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d101      	bne.n	8000960 <fsm_automatic_run+0x624>
 800095c:	2302      	movs	r3, #2
 800095e:	e000      	b.n	8000962 <fsm_automatic_run+0x626>
 8000960:	2301      	movs	r3, #1
 8000962:	4a3f      	ldr	r2, [pc, #252]	@ (8000a60 <fsm_automatic_run+0x724>)
 8000964:	6013      	str	r3, [r2, #0]
			setTimer(0,SCAN_TIME);
 8000966:	21fa      	movs	r1, #250	@ 0xfa
 8000968:	2000      	movs	r0, #0
 800096a:	f000 fe49 	bl	8001600 <setTimer>
		}
		if (timer_flag[2] == 1) {
 800096e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a64 <fsm_automatic_run+0x728>)
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d10e      	bne.n	8000994 <fsm_automatic_run+0x658>
			time--;
 8000976:	4b33      	ldr	r3, [pc, #204]	@ (8000a44 <fsm_automatic_run+0x708>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	3b01      	subs	r3, #1
 800097c:	4a31      	ldr	r2, [pc, #196]	@ (8000a44 <fsm_automatic_run+0x708>)
 800097e:	6013      	str	r3, [r2, #0]
			time2--;
 8000980:	4b34      	ldr	r3, [pc, #208]	@ (8000a54 <fsm_automatic_run+0x718>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3b01      	subs	r3, #1
 8000986:	4a33      	ldr	r2, [pc, #204]	@ (8000a54 <fsm_automatic_run+0x718>)
 8000988:	6013      	str	r3, [r2, #0]
			setTimer(2,1000);
 800098a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800098e:	2002      	movs	r0, #2
 8000990:	f000 fe36 	bl	8001600 <setTimer>
		}
		if (timer_flag[1] == 1) {
 8000994:	4b33      	ldr	r3, [pc, #204]	@ (8000a64 <fsm_automatic_run+0x728>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d11c      	bne.n	80009d6 <fsm_automatic_run+0x69a>
			status = RED_GREEN;
 800099c:	4b32      	ldr	r3, [pc, #200]	@ (8000a68 <fsm_automatic_run+0x72c>)
 800099e:	2202      	movs	r2, #2
 80009a0:	601a      	str	r2, [r3, #0]
			setTimer(1,green);
 80009a2:	4b32      	ldr	r3, [pc, #200]	@ (8000a6c <fsm_automatic_run+0x730>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4619      	mov	r1, r3
 80009a8:	2001      	movs	r0, #1
 80009aa:	f000 fe29 	bl	8001600 <setTimer>
			time2 = green/1000;
 80009ae:	4b2f      	ldr	r3, [pc, #188]	@ (8000a6c <fsm_automatic_run+0x730>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a70 <fsm_automatic_run+0x734>)
 80009b4:	fb82 1203 	smull	r1, r2, r2, r3
 80009b8:	1192      	asrs	r2, r2, #6
 80009ba:	17db      	asrs	r3, r3, #31
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	4a25      	ldr	r2, [pc, #148]	@ (8000a54 <fsm_automatic_run+0x718>)
 80009c0:	6013      	str	r3, [r2, #0]
			time = red/1000;
 80009c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <fsm_automatic_run+0x738>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000a70 <fsm_automatic_run+0x734>)
 80009c8:	fb82 1203 	smull	r1, r2, r2, r3
 80009cc:	1192      	asrs	r2, r2, #6
 80009ce:	17db      	asrs	r3, r3, #31
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a44 <fsm_automatic_run+0x708>)
 80009d4:	6013      	str	r3, [r2, #0]
		}
		if (isModePressed() == 1) {
 80009d6:	f7ff fbcb 	bl	8000170 <isModePressed>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d110      	bne.n	8000a02 <fsm_automatic_run+0x6c6>
			init_segment();
 80009e0:	f000 fb10 	bl	8001004 <init_segment>
			status = MAN_YELOW_RED;
 80009e4:	4b20      	ldr	r3, [pc, #128]	@ (8000a68 <fsm_automatic_run+0x72c>)
 80009e6:	220d      	movs	r2, #13
 80009e8:	601a      	str	r2, [r3, #0]
			current_status = YELOW_RED;
 80009ea:	4b23      	ldr	r3, [pc, #140]	@ (8000a78 <fsm_automatic_run+0x73c>)
 80009ec:	2205      	movs	r2, #5
 80009ee:	601a      	str	r2, [r3, #0]
			current_time = time < time2 ? time : time2;
 80009f0:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <fsm_automatic_run+0x718>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <fsm_automatic_run+0x708>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4293      	cmp	r3, r2
 80009fa:	bfa8      	it	ge
 80009fc:	4613      	movge	r3, r2
 80009fe:	4a1f      	ldr	r2, [pc, #124]	@ (8000a7c <fsm_automatic_run+0x740>)
 8000a00:	6013      	str	r3, [r2, #0]
		}
		if (isApplyPressed() == 1) {
 8000a02:	f7ff fba3 	bl	800014c <isApplyPressed>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d117      	bne.n	8000a3c <fsm_automatic_run+0x700>
			current_status = RED_GREEN;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <fsm_automatic_run+0x73c>)
 8000a0e:	2202      	movs	r2, #2
 8000a10:	601a      	str	r2, [r3, #0]
			current_time = time < time2 ? time : time2;
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <fsm_automatic_run+0x718>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <fsm_automatic_run+0x708>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	bfa8      	it	ge
 8000a1e:	4613      	movge	r3, r2
 8000a20:	4a16      	ldr	r2, [pc, #88]	@ (8000a7c <fsm_automatic_run+0x740>)
 8000a22:	6013      	str	r3, [r2, #0]
			status = SETTING;
 8000a24:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <fsm_automatic_run+0x72c>)
 8000a26:	2213      	movs	r2, #19
 8000a28:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a2a:	e007      	b.n	8000a3c <fsm_automatic_run+0x700>
	default:
		break;
 8000a2c:	bf00      	nop
 8000a2e:	e006      	b.n	8000a3e <fsm_automatic_run+0x702>
		break;
 8000a30:	bf00      	nop
 8000a32:	e004      	b.n	8000a3e <fsm_automatic_run+0x702>
		break;
 8000a34:	bf00      	nop
 8000a36:	e002      	b.n	8000a3e <fsm_automatic_run+0x702>
		break;
 8000a38:	bf00      	nop
 8000a3a:	e000      	b.n	8000a3e <fsm_automatic_run+0x702>
		break;
 8000a3c:	bf00      	nop
	}
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000a8 	.word	0x200000a8
 8000a48:	66666667 	.word	0x66666667
 8000a4c:	200000b0 	.word	0x200000b0
 8000a50:	200000b4 	.word	0x200000b4
 8000a54:	200000ac 	.word	0x200000ac
 8000a58:	200000b8 	.word	0x200000b8
 8000a5c:	200000bc 	.word	0x200000bc
 8000a60:	20000050 	.word	0x20000050
 8000a64:	20000124 	.word	0x20000124
 8000a68:	20000058 	.word	0x20000058
 8000a6c:	20000064 	.word	0x20000064
 8000a70:	10624dd3 	.word	0x10624dd3
 8000a74:	2000005c 	.word	0x2000005c
 8000a78:	20000068 	.word	0x20000068
 8000a7c:	200000d8 	.word	0x200000d8

08000a80 <fsm_manual>:
int led_time;
int led_time2;
int ledd = 1;
int led_timea, led_timeb, led_time2a, led_time2b;

void fsm_manual() {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	switch(status) {
 8000a84:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb0 <fsm_manual+0x130>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3b0a      	subs	r3, #10
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	f200 8084 	bhi.w	8000b98 <fsm_manual+0x118>
 8000a90:	a201      	add	r2, pc, #4	@ (adr r2, 8000a98 <fsm_manual+0x18>)
 8000a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a96:	bf00      	nop
 8000a98:	08000aa9 	.word	0x08000aa9
 8000a9c:	08000ae5 	.word	0x08000ae5
 8000aa0:	08000b21 	.word	0x08000b21
 8000aa4:	08000b5d 	.word	0x08000b5d
		case MAN_RED_GREEN:
			//TODO

			LIGHT_RED_GREEN();
 8000aa8:	f000 fed2 	bl	8001850 <LIGHT_RED_GREEN>

			if (isModePressed() == 1) {
 8000aac:	f7ff fb60 	bl	8000170 <isModePressed>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d102      	bne.n	8000abc <fsm_manual+0x3c>
				status = MAN_RED_YELOW;
 8000ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8000bb0 <fsm_manual+0x130>)
 8000ab8:	220b      	movs	r2, #11
 8000aba:	601a      	str	r2, [r3, #0]
			}
			if (isApplyPressed() == 1) {
 8000abc:	f7ff fb46 	bl	800014c <isApplyPressed>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d16a      	bne.n	8000b9c <fsm_manual+0x11c>
				status = current_status;
 8000ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8000bb4 <fsm_manual+0x134>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a39      	ldr	r2, [pc, #228]	@ (8000bb0 <fsm_manual+0x130>)
 8000acc:	6013      	str	r3, [r2, #0]
				setTimer(1,current_time*1000);
 8000ace:	4b3a      	ldr	r3, [pc, #232]	@ (8000bb8 <fsm_manual+0x138>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ad6:	fb02 f303 	mul.w	r3, r2, r3
 8000ada:	4619      	mov	r1, r3
 8000adc:	2001      	movs	r0, #1
 8000ade:	f000 fd8f 	bl	8001600 <setTimer>
			}
			break;
 8000ae2:	e05b      	b.n	8000b9c <fsm_manual+0x11c>
		case MAN_RED_YELOW:
			//TODO

			LIGHT_RED_YELOW();
 8000ae4:	f000 fefa 	bl	80018dc <LIGHT_RED_YELOW>

			if (isModePressed() == 1) {
 8000ae8:	f7ff fb42 	bl	8000170 <isModePressed>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d102      	bne.n	8000af8 <fsm_manual+0x78>
				status = MAN_GREEN_RED;
 8000af2:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb0 <fsm_manual+0x130>)
 8000af4:	220c      	movs	r2, #12
 8000af6:	601a      	str	r2, [r3, #0]
			}
			if (isApplyPressed() == 1) {
 8000af8:	f7ff fb28 	bl	800014c <isApplyPressed>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d14e      	bne.n	8000ba0 <fsm_manual+0x120>
				status = current_status;
 8000b02:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb4 <fsm_manual+0x134>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a2a      	ldr	r2, [pc, #168]	@ (8000bb0 <fsm_manual+0x130>)
 8000b08:	6013      	str	r3, [r2, #0]
				setTimer(1,current_time*1000);
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb8 <fsm_manual+0x138>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	4619      	mov	r1, r3
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f000 fd71 	bl	8001600 <setTimer>
			}
			break;
 8000b1e:	e03f      	b.n	8000ba0 <fsm_manual+0x120>
		case MAN_GREEN_RED:
			//TODO

			LIGHT_GREEN_RED();
 8000b20:	f000 ff22 	bl	8001968 <LIGHT_GREEN_RED>

			if (isModePressed() == 1) {
 8000b24:	f7ff fb24 	bl	8000170 <isModePressed>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d102      	bne.n	8000b34 <fsm_manual+0xb4>
				status = MAN_YELOW_RED;
 8000b2e:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <fsm_manual+0x130>)
 8000b30:	220d      	movs	r2, #13
 8000b32:	601a      	str	r2, [r3, #0]
			}
			if (isApplyPressed() == 1) {
 8000b34:	f7ff fb0a 	bl	800014c <isApplyPressed>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d132      	bne.n	8000ba4 <fsm_manual+0x124>
				status = current_status;
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb4 <fsm_manual+0x134>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb0 <fsm_manual+0x130>)
 8000b44:	6013      	str	r3, [r2, #0]
				setTimer(1,current_time*1000);
 8000b46:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <fsm_manual+0x138>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b4e:	fb02 f303 	mul.w	r3, r2, r3
 8000b52:	4619      	mov	r1, r3
 8000b54:	2001      	movs	r0, #1
 8000b56:	f000 fd53 	bl	8001600 <setTimer>
			}
			break;
 8000b5a:	e023      	b.n	8000ba4 <fsm_manual+0x124>
		case MAN_YELOW_RED:
			//TODO

			LIGHT_YELOW_RED();
 8000b5c:	f000 ff4a 	bl	80019f4 <LIGHT_YELOW_RED>

			if (isModePressed() == 1) {
 8000b60:	f7ff fb06 	bl	8000170 <isModePressed>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d102      	bne.n	8000b70 <fsm_manual+0xf0>
				status = MAN_RED_GREEN;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <fsm_manual+0x130>)
 8000b6c:	220a      	movs	r2, #10
 8000b6e:	601a      	str	r2, [r3, #0]
			}
			if (isApplyPressed() == 1) {
 8000b70:	f7ff faec 	bl	800014c <isApplyPressed>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d116      	bne.n	8000ba8 <fsm_manual+0x128>
				status = current_status;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <fsm_manual+0x134>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb0 <fsm_manual+0x130>)
 8000b80:	6013      	str	r3, [r2, #0]
				setTimer(1,current_time*1000);
 8000b82:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <fsm_manual+0x138>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b8a:	fb02 f303 	mul.w	r3, r2, r3
 8000b8e:	4619      	mov	r1, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 fd35 	bl	8001600 <setTimer>
			}
			break;
 8000b96:	e007      	b.n	8000ba8 <fsm_manual+0x128>
		default:
			break;
 8000b98:	bf00      	nop
 8000b9a:	e006      	b.n	8000baa <fsm_manual+0x12a>
			break;
 8000b9c:	bf00      	nop
 8000b9e:	e004      	b.n	8000baa <fsm_manual+0x12a>
			break;
 8000ba0:	bf00      	nop
 8000ba2:	e002      	b.n	8000baa <fsm_manual+0x12a>
			break;
 8000ba4:	bf00      	nop
 8000ba6:	e000      	b.n	8000baa <fsm_manual+0x12a>
			break;
 8000ba8:	bf00      	nop
		}
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000058 	.word	0x20000058
 8000bb4:	20000068 	.word	0x20000068
 8000bb8:	200000d8 	.word	0x200000d8

08000bbc <fsm_setting>:

int count = 0, leds = 1;
int counta, countb;
int red_term, green_term, yelow_term;

void fsm_setting() {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	switch(status) {
 8000bc0:	4b9a      	ldr	r3, [pc, #616]	@ (8000e2c <fsm_setting+0x270>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	3b13      	subs	r3, #19
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	f200 81f4 	bhi.w	8000fb4 <fsm_setting+0x3f8>
 8000bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8000bd4 <fsm_setting+0x18>)
 8000bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd2:	bf00      	nop
 8000bd4:	08000be5 	.word	0x08000be5
 8000bd8:	08000c11 	.word	0x08000c11
 8000bdc:	08000d1f 	.word	0x08000d1f
 8000be0:	08000e69 	.word	0x08000e69
		case SETTING:
			INIT_LIGHT();
 8000be4:	f000 fdee 	bl	80017c4 <INIT_LIGHT>
			init_segment();
 8000be8:	f000 fa0c 	bl	8001004 <init_segment>
			setTimer(0,SCAN_TIME);
 8000bec:	21fa      	movs	r1, #250	@ 0xfa
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 fd06 	bl	8001600 <setTimer>
			status = RED_SETTING;
 8000bf4:	4b8d      	ldr	r3, [pc, #564]	@ (8000e2c <fsm_setting+0x270>)
 8000bf6:	2214      	movs	r2, #20
 8000bf8:	601a      	str	r2, [r3, #0]
			count = red/1000;
 8000bfa:	4b8d      	ldr	r3, [pc, #564]	@ (8000e30 <fsm_setting+0x274>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a8d      	ldr	r2, [pc, #564]	@ (8000e34 <fsm_setting+0x278>)
 8000c00:	fb82 1203 	smull	r1, r2, r2, r3
 8000c04:	1192      	asrs	r2, r2, #6
 8000c06:	17db      	asrs	r3, r3, #31
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	4a8b      	ldr	r2, [pc, #556]	@ (8000e38 <fsm_setting+0x27c>)
 8000c0c:	6013      	str	r3, [r2, #0]
			break;
 8000c0e:	e1d8      	b.n	8000fc2 <fsm_setting+0x406>
		case RED_SETTING:
			//TODO
			counta = count/10; countb = count%10;
 8000c10:	4b89      	ldr	r3, [pc, #548]	@ (8000e38 <fsm_setting+0x27c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a89      	ldr	r2, [pc, #548]	@ (8000e3c <fsm_setting+0x280>)
 8000c16:	fb82 1203 	smull	r1, r2, r2, r3
 8000c1a:	1092      	asrs	r2, r2, #2
 8000c1c:	17db      	asrs	r3, r3, #31
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	4a87      	ldr	r2, [pc, #540]	@ (8000e40 <fsm_setting+0x284>)
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b84      	ldr	r3, [pc, #528]	@ (8000e38 <fsm_setting+0x27c>)
 8000c26:	6819      	ldr	r1, [r3, #0]
 8000c28:	4b84      	ldr	r3, [pc, #528]	@ (8000e3c <fsm_setting+0x280>)
 8000c2a:	fb83 2301 	smull	r2, r3, r3, r1
 8000c2e:	109a      	asrs	r2, r3, #2
 8000c30:	17cb      	asrs	r3, r1, #31
 8000c32:	1ad2      	subs	r2, r2, r3
 8000c34:	4613      	mov	r3, r2
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	1aca      	subs	r2, r1, r3
 8000c3e:	4b81      	ldr	r3, [pc, #516]	@ (8000e44 <fsm_setting+0x288>)
 8000c40:	601a      	str	r2, [r3, #0]
			led7_seg1(leds, (leds==1)?counta:countb);
 8000c42:	4b81      	ldr	r3, [pc, #516]	@ (8000e48 <fsm_setting+0x28c>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4b80      	ldr	r3, [pc, #512]	@ (8000e48 <fsm_setting+0x28c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d102      	bne.n	8000c54 <fsm_setting+0x98>
 8000c4e:	4b7c      	ldr	r3, [pc, #496]	@ (8000e40 <fsm_setting+0x284>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	e001      	b.n	8000c58 <fsm_setting+0x9c>
 8000c54:	4b7b      	ldr	r3, [pc, #492]	@ (8000e44 <fsm_setting+0x288>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	f000 fb3c 	bl	80012d8 <led7_seg1>
			if (isTimeUpPressed() == 1) {
 8000c60:	f7ff fa98 	bl	8000194 <isTimeUpPressed>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d10b      	bne.n	8000c82 <fsm_setting+0xc6>
				count++;
 8000c6a:	4b73      	ldr	r3, [pc, #460]	@ (8000e38 <fsm_setting+0x27c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	4a71      	ldr	r2, [pc, #452]	@ (8000e38 <fsm_setting+0x27c>)
 8000c72:	6013      	str	r3, [r2, #0]
				if (count > 99) count = 0;
 8000c74:	4b70      	ldr	r3, [pc, #448]	@ (8000e38 <fsm_setting+0x27c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b63      	cmp	r3, #99	@ 0x63
 8000c7a:	dd02      	ble.n	8000c82 <fsm_setting+0xc6>
 8000c7c:	4b6e      	ldr	r3, [pc, #440]	@ (8000e38 <fsm_setting+0x27c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
			}
			if (isTimeDownPressed() == 1) {
 8000c82:	f7ff fa99 	bl	80001b8 <isTimeDownPressed>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d108      	bne.n	8000c9e <fsm_setting+0xe2>
				if (count > 0) count--;
 8000c8c:	4b6a      	ldr	r3, [pc, #424]	@ (8000e38 <fsm_setting+0x27c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	dd04      	ble.n	8000c9e <fsm_setting+0xe2>
 8000c94:	4b68      	ldr	r3, [pc, #416]	@ (8000e38 <fsm_setting+0x27c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	4a67      	ldr	r2, [pc, #412]	@ (8000e38 <fsm_setting+0x27c>)
 8000c9c:	6013      	str	r3, [r2, #0]
			}
			if (isModePressed() == 1) {
 8000c9e:	f7ff fa67 	bl	8000170 <isModePressed>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d109      	bne.n	8000cbc <fsm_setting+0x100>
				setTimer(1,current_time);
 8000ca8:	4b68      	ldr	r3, [pc, #416]	@ (8000e4c <fsm_setting+0x290>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f000 fca6 	bl	8001600 <setTimer>
				status = current_status;
 8000cb4:	4b66      	ldr	r3, [pc, #408]	@ (8000e50 <fsm_setting+0x294>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a5c      	ldr	r2, [pc, #368]	@ (8000e2c <fsm_setting+0x270>)
 8000cba:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[0] == 1) {
 8000cbc:	4b65      	ldr	r3, [pc, #404]	@ (8000e54 <fsm_setting+0x298>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d10e      	bne.n	8000ce2 <fsm_setting+0x126>
				setTimer(0,SCAN_TIME);
 8000cc4:	21fa      	movs	r1, #250	@ 0xfa
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 fc9a 	bl	8001600 <setTimer>
				Toggle_red();
 8000ccc:	f000 fed8 	bl	8001a80 <Toggle_red>
				leds = leds == 1 ? 2 : 1;
 8000cd0:	4b5d      	ldr	r3, [pc, #372]	@ (8000e48 <fsm_setting+0x28c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d101      	bne.n	8000cdc <fsm_setting+0x120>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	e000      	b.n	8000cde <fsm_setting+0x122>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	4a5a      	ldr	r2, [pc, #360]	@ (8000e48 <fsm_setting+0x28c>)
 8000ce0:	6013      	str	r3, [r2, #0]
			}
			if (isApplyPressed()) {
 8000ce2:	f7ff fa33 	bl	800014c <isApplyPressed>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 8165 	beq.w	8000fb8 <fsm_setting+0x3fc>
				INIT_LIGHT();
 8000cee:	f000 fd69 	bl	80017c4 <INIT_LIGHT>
				setTimer(0,SCAN_TIME);
 8000cf2:	21fa      	movs	r1, #250	@ 0xfa
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f000 fc83 	bl	8001600 <setTimer>
				red_term = count;
 8000cfa:	4b4f      	ldr	r3, [pc, #316]	@ (8000e38 <fsm_setting+0x27c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a56      	ldr	r2, [pc, #344]	@ (8000e58 <fsm_setting+0x29c>)
 8000d00:	6013      	str	r3, [r2, #0]
				count = yelow/1000;
 8000d02:	4b56      	ldr	r3, [pc, #344]	@ (8000e5c <fsm_setting+0x2a0>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a4b      	ldr	r2, [pc, #300]	@ (8000e34 <fsm_setting+0x278>)
 8000d08:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0c:	1192      	asrs	r2, r2, #6
 8000d0e:	17db      	asrs	r3, r3, #31
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	4a49      	ldr	r2, [pc, #292]	@ (8000e38 <fsm_setting+0x27c>)
 8000d14:	6013      	str	r3, [r2, #0]
				status = YELOW_SETTING;
 8000d16:	4b45      	ldr	r3, [pc, #276]	@ (8000e2c <fsm_setting+0x270>)
 8000d18:	2215      	movs	r2, #21
 8000d1a:	601a      	str	r2, [r3, #0]
			}
			break;
 8000d1c:	e14c      	b.n	8000fb8 <fsm_setting+0x3fc>
		case YELOW_SETTING:
			//TODO
			counta = count/10; countb = count%10;
 8000d1e:	4b46      	ldr	r3, [pc, #280]	@ (8000e38 <fsm_setting+0x27c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a46      	ldr	r2, [pc, #280]	@ (8000e3c <fsm_setting+0x280>)
 8000d24:	fb82 1203 	smull	r1, r2, r2, r3
 8000d28:	1092      	asrs	r2, r2, #2
 8000d2a:	17db      	asrs	r3, r3, #31
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	4a44      	ldr	r2, [pc, #272]	@ (8000e40 <fsm_setting+0x284>)
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	4b41      	ldr	r3, [pc, #260]	@ (8000e38 <fsm_setting+0x27c>)
 8000d34:	6819      	ldr	r1, [r3, #0]
 8000d36:	4b41      	ldr	r3, [pc, #260]	@ (8000e3c <fsm_setting+0x280>)
 8000d38:	fb83 2301 	smull	r2, r3, r3, r1
 8000d3c:	109a      	asrs	r2, r3, #2
 8000d3e:	17cb      	asrs	r3, r1, #31
 8000d40:	1ad2      	subs	r2, r2, r3
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	1aca      	subs	r2, r1, r3
 8000d4c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e44 <fsm_setting+0x288>)
 8000d4e:	601a      	str	r2, [r3, #0]
			led7_seg1(leds, (leds==1)?counta:countb);
 8000d50:	4b3d      	ldr	r3, [pc, #244]	@ (8000e48 <fsm_setting+0x28c>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b3c      	ldr	r3, [pc, #240]	@ (8000e48 <fsm_setting+0x28c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d102      	bne.n	8000d62 <fsm_setting+0x1a6>
 8000d5c:	4b38      	ldr	r3, [pc, #224]	@ (8000e40 <fsm_setting+0x284>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	e001      	b.n	8000d66 <fsm_setting+0x1aa>
 8000d62:	4b38      	ldr	r3, [pc, #224]	@ (8000e44 <fsm_setting+0x288>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4619      	mov	r1, r3
 8000d68:	4610      	mov	r0, r2
 8000d6a:	f000 fab5 	bl	80012d8 <led7_seg1>
			if (isTimeUpPressed() == 1) {
 8000d6e:	f7ff fa11 	bl	8000194 <isTimeUpPressed>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d10b      	bne.n	8000d90 <fsm_setting+0x1d4>
				count++;
 8000d78:	4b2f      	ldr	r3, [pc, #188]	@ (8000e38 <fsm_setting+0x27c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	4a2e      	ldr	r2, [pc, #184]	@ (8000e38 <fsm_setting+0x27c>)
 8000d80:	6013      	str	r3, [r2, #0]
				if (count > 99) count = 0;
 8000d82:	4b2d      	ldr	r3, [pc, #180]	@ (8000e38 <fsm_setting+0x27c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b63      	cmp	r3, #99	@ 0x63
 8000d88:	dd02      	ble.n	8000d90 <fsm_setting+0x1d4>
 8000d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e38 <fsm_setting+0x27c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
			}
			if (isTimeDownPressed() == 1) {
 8000d90:	f7ff fa12 	bl	80001b8 <isTimeDownPressed>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d108      	bne.n	8000dac <fsm_setting+0x1f0>
				if (count > 0) count--;
 8000d9a:	4b27      	ldr	r3, [pc, #156]	@ (8000e38 <fsm_setting+0x27c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	dd04      	ble.n	8000dac <fsm_setting+0x1f0>
 8000da2:	4b25      	ldr	r3, [pc, #148]	@ (8000e38 <fsm_setting+0x27c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	4a23      	ldr	r2, [pc, #140]	@ (8000e38 <fsm_setting+0x27c>)
 8000daa:	6013      	str	r3, [r2, #0]
			}
			if (isModePressed() == 1) {
 8000dac:	f7ff f9e0 	bl	8000170 <isModePressed>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d109      	bne.n	8000dca <fsm_setting+0x20e>
				setTimer(1,current_time);
 8000db6:	4b25      	ldr	r3, [pc, #148]	@ (8000e4c <fsm_setting+0x290>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f000 fc1f 	bl	8001600 <setTimer>
				status = current_status;
 8000dc2:	4b23      	ldr	r3, [pc, #140]	@ (8000e50 <fsm_setting+0x294>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a19      	ldr	r2, [pc, #100]	@ (8000e2c <fsm_setting+0x270>)
 8000dc8:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[0] == 1) {
 8000dca:	4b22      	ldr	r3, [pc, #136]	@ (8000e54 <fsm_setting+0x298>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d10e      	bne.n	8000df0 <fsm_setting+0x234>
				setTimer(0,SCAN_TIME);
 8000dd2:	21fa      	movs	r1, #250	@ 0xfa
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f000 fc13 	bl	8001600 <setTimer>
				Toggle_yelow();
 8000dda:	f000 fe69 	bl	8001ab0 <Toggle_yelow>
				leds = leds == 1 ? 2 : 1;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <fsm_setting+0x28c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d101      	bne.n	8000dea <fsm_setting+0x22e>
 8000de6:	2302      	movs	r3, #2
 8000de8:	e000      	b.n	8000dec <fsm_setting+0x230>
 8000dea:	2301      	movs	r3, #1
 8000dec:	4a16      	ldr	r2, [pc, #88]	@ (8000e48 <fsm_setting+0x28c>)
 8000dee:	6013      	str	r3, [r2, #0]
			}
			if (isApplyPressed()) {
 8000df0:	f7ff f9ac 	bl	800014c <isApplyPressed>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 80e0 	beq.w	8000fbc <fsm_setting+0x400>
				INIT_LIGHT();
 8000dfc:	f000 fce2 	bl	80017c4 <INIT_LIGHT>
				setTimer(0,SCAN_TIME);
 8000e00:	21fa      	movs	r1, #250	@ 0xfa
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 fbfc 	bl	8001600 <setTimer>
				yelow_term = count;
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <fsm_setting+0x27c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a14      	ldr	r2, [pc, #80]	@ (8000e60 <fsm_setting+0x2a4>)
 8000e0e:	6013      	str	r3, [r2, #0]
				count = green/1000;
 8000e10:	4b14      	ldr	r3, [pc, #80]	@ (8000e64 <fsm_setting+0x2a8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	@ (8000e34 <fsm_setting+0x278>)
 8000e16:	fb82 1203 	smull	r1, r2, r2, r3
 8000e1a:	1192      	asrs	r2, r2, #6
 8000e1c:	17db      	asrs	r3, r3, #31
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <fsm_setting+0x27c>)
 8000e22:	6013      	str	r3, [r2, #0]
				status = GREEN_SETTING;
 8000e24:	4b01      	ldr	r3, [pc, #4]	@ (8000e2c <fsm_setting+0x270>)
 8000e26:	2216      	movs	r2, #22
 8000e28:	601a      	str	r2, [r3, #0]
			}
			break;
 8000e2a:	e0c7      	b.n	8000fbc <fsm_setting+0x400>
 8000e2c:	20000058 	.word	0x20000058
 8000e30:	2000005c 	.word	0x2000005c
 8000e34:	10624dd3 	.word	0x10624dd3
 8000e38:	200000c0 	.word	0x200000c0
 8000e3c:	66666667 	.word	0x66666667
 8000e40:	200000c4 	.word	0x200000c4
 8000e44:	200000c8 	.word	0x200000c8
 8000e48:	20000054 	.word	0x20000054
 8000e4c:	200000d8 	.word	0x200000d8
 8000e50:	20000068 	.word	0x20000068
 8000e54:	20000124 	.word	0x20000124
 8000e58:	200000cc 	.word	0x200000cc
 8000e5c:	20000060 	.word	0x20000060
 8000e60:	200000d4 	.word	0x200000d4
 8000e64:	20000064 	.word	0x20000064
		case GREEN_SETTING:
			//TODO
			counta = count/10; countb = count%10;
 8000e68:	4b57      	ldr	r3, [pc, #348]	@ (8000fc8 <fsm_setting+0x40c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a57      	ldr	r2, [pc, #348]	@ (8000fcc <fsm_setting+0x410>)
 8000e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e72:	1092      	asrs	r2, r2, #2
 8000e74:	17db      	asrs	r3, r3, #31
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	4a55      	ldr	r2, [pc, #340]	@ (8000fd0 <fsm_setting+0x414>)
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	4b52      	ldr	r3, [pc, #328]	@ (8000fc8 <fsm_setting+0x40c>)
 8000e7e:	6819      	ldr	r1, [r3, #0]
 8000e80:	4b52      	ldr	r3, [pc, #328]	@ (8000fcc <fsm_setting+0x410>)
 8000e82:	fb83 2301 	smull	r2, r3, r3, r1
 8000e86:	109a      	asrs	r2, r3, #2
 8000e88:	17cb      	asrs	r3, r1, #31
 8000e8a:	1ad2      	subs	r2, r2, r3
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	1aca      	subs	r2, r1, r3
 8000e96:	4b4f      	ldr	r3, [pc, #316]	@ (8000fd4 <fsm_setting+0x418>)
 8000e98:	601a      	str	r2, [r3, #0]
			led7_seg1(leds, (leds==1)?counta:countb);
 8000e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8000fd8 <fsm_setting+0x41c>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4b4e      	ldr	r3, [pc, #312]	@ (8000fd8 <fsm_setting+0x41c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d102      	bne.n	8000eac <fsm_setting+0x2f0>
 8000ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8000fd0 <fsm_setting+0x414>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	e001      	b.n	8000eb0 <fsm_setting+0x2f4>
 8000eac:	4b49      	ldr	r3, [pc, #292]	@ (8000fd4 <fsm_setting+0x418>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	f000 fa10 	bl	80012d8 <led7_seg1>
			if (isTimeUpPressed() == 1) {
 8000eb8:	f7ff f96c 	bl	8000194 <isTimeUpPressed>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d10b      	bne.n	8000eda <fsm_setting+0x31e>
				count++;
 8000ec2:	4b41      	ldr	r3, [pc, #260]	@ (8000fc8 <fsm_setting+0x40c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	4a3f      	ldr	r2, [pc, #252]	@ (8000fc8 <fsm_setting+0x40c>)
 8000eca:	6013      	str	r3, [r2, #0]
				if (count > 99) count = 0;
 8000ecc:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc8 <fsm_setting+0x40c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b63      	cmp	r3, #99	@ 0x63
 8000ed2:	dd02      	ble.n	8000eda <fsm_setting+0x31e>
 8000ed4:	4b3c      	ldr	r3, [pc, #240]	@ (8000fc8 <fsm_setting+0x40c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
			}
			if (isTimeDownPressed() == 1) {
 8000eda:	f7ff f96d 	bl	80001b8 <isTimeDownPressed>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d108      	bne.n	8000ef6 <fsm_setting+0x33a>
				if (count > 0) count--;
 8000ee4:	4b38      	ldr	r3, [pc, #224]	@ (8000fc8 <fsm_setting+0x40c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	dd04      	ble.n	8000ef6 <fsm_setting+0x33a>
 8000eec:	4b36      	ldr	r3, [pc, #216]	@ (8000fc8 <fsm_setting+0x40c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	4a35      	ldr	r2, [pc, #212]	@ (8000fc8 <fsm_setting+0x40c>)
 8000ef4:	6013      	str	r3, [r2, #0]
			}
			if (isModePressed() == 1) {
 8000ef6:	f7ff f93b 	bl	8000170 <isModePressed>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d109      	bne.n	8000f14 <fsm_setting+0x358>
				setTimer(1,current_time);
 8000f00:	4b36      	ldr	r3, [pc, #216]	@ (8000fdc <fsm_setting+0x420>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	2001      	movs	r0, #1
 8000f08:	f000 fb7a 	bl	8001600 <setTimer>
				status = current_status;
 8000f0c:	4b34      	ldr	r3, [pc, #208]	@ (8000fe0 <fsm_setting+0x424>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a34      	ldr	r2, [pc, #208]	@ (8000fe4 <fsm_setting+0x428>)
 8000f12:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[0] == 1) {
 8000f14:	4b34      	ldr	r3, [pc, #208]	@ (8000fe8 <fsm_setting+0x42c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d10e      	bne.n	8000f3a <fsm_setting+0x37e>
				setTimer(0,SCAN_TIME);
 8000f1c:	21fa      	movs	r1, #250	@ 0xfa
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 fb6e 	bl	8001600 <setTimer>
				Toggle_green();
 8000f24:	f000 fddc 	bl	8001ae0 <Toggle_green>
				leds = leds == 1 ? 2 : 1;
 8000f28:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd8 <fsm_setting+0x41c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d101      	bne.n	8000f34 <fsm_setting+0x378>
 8000f30:	2302      	movs	r3, #2
 8000f32:	e000      	b.n	8000f36 <fsm_setting+0x37a>
 8000f34:	2301      	movs	r3, #1
 8000f36:	4a28      	ldr	r2, [pc, #160]	@ (8000fd8 <fsm_setting+0x41c>)
 8000f38:	6013      	str	r3, [r2, #0]
			}
			if (isApplyPressed()) {
 8000f3a:	f7ff f907 	bl	800014c <isApplyPressed>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d03d      	beq.n	8000fc0 <fsm_setting+0x404>
				setTimer(0,SCAN_TIME);
 8000f44:	21fa      	movs	r1, #250	@ 0xfa
 8000f46:	2000      	movs	r0, #0
 8000f48:	f000 fb5a 	bl	8001600 <setTimer>
				green_term = count;
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <fsm_setting+0x40c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a26      	ldr	r2, [pc, #152]	@ (8000fec <fsm_setting+0x430>)
 8000f52:	6013      	str	r3, [r2, #0]
				count = 0;
 8000f54:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc8 <fsm_setting+0x40c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
				if (green_term > 0 && yelow_term > 0 && red_term == green_term + yelow_term) {
 8000f5a:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <fsm_setting+0x430>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	dd24      	ble.n	8000fac <fsm_setting+0x3f0>
 8000f62:	4b23      	ldr	r3, [pc, #140]	@ (8000ff0 <fsm_setting+0x434>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	dd20      	ble.n	8000fac <fsm_setting+0x3f0>
 8000f6a:	4b20      	ldr	r3, [pc, #128]	@ (8000fec <fsm_setting+0x430>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <fsm_setting+0x434>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	441a      	add	r2, r3
 8000f74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <fsm_setting+0x438>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d117      	bne.n	8000fac <fsm_setting+0x3f0>
					red = red_term*1000;
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff4 <fsm_setting+0x438>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f84:	fb02 f303 	mul.w	r3, r2, r3
 8000f88:	4a1b      	ldr	r2, [pc, #108]	@ (8000ff8 <fsm_setting+0x43c>)
 8000f8a:	6013      	str	r3, [r2, #0]
					green = green_term*1000;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <fsm_setting+0x430>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f94:	fb02 f303 	mul.w	r3, r2, r3
 8000f98:	4a18      	ldr	r2, [pc, #96]	@ (8000ffc <fsm_setting+0x440>)
 8000f9a:	6013      	str	r3, [r2, #0]
					yelow = yelow_term*1000;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <fsm_setting+0x434>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	4a15      	ldr	r2, [pc, #84]	@ (8001000 <fsm_setting+0x444>)
 8000faa:	6013      	str	r3, [r2, #0]
				}
				status = INIT;
 8000fac:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <fsm_setting+0x428>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
			}
			break;
 8000fb2:	e005      	b.n	8000fc0 <fsm_setting+0x404>
		default:
			break;
 8000fb4:	bf00      	nop
 8000fb6:	e004      	b.n	8000fc2 <fsm_setting+0x406>
			break;
 8000fb8:	bf00      	nop
 8000fba:	e002      	b.n	8000fc2 <fsm_setting+0x406>
			break;
 8000fbc:	bf00      	nop
 8000fbe:	e000      	b.n	8000fc2 <fsm_setting+0x406>
			break;
 8000fc0:	bf00      	nop
	}
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000c0 	.word	0x200000c0
 8000fcc:	66666667 	.word	0x66666667
 8000fd0:	200000c4 	.word	0x200000c4
 8000fd4:	200000c8 	.word	0x200000c8
 8000fd8:	20000054 	.word	0x20000054
 8000fdc:	200000d8 	.word	0x200000d8
 8000fe0:	20000068 	.word	0x20000068
 8000fe4:	20000058 	.word	0x20000058
 8000fe8:	20000124 	.word	0x20000124
 8000fec:	200000d0 	.word	0x200000d0
 8000ff0:	200000d4 	.word	0x200000d4
 8000ff4:	200000cc 	.word	0x200000cc
 8000ff8:	2000005c 	.word	0x2000005c
 8000ffc:	20000064 	.word	0x20000064
 8001000:	20000060 	.word	0x20000060

08001004 <init_segment>:
 *      Author: MSIFPT
 */

#include "led7_segment.h"

void init_segment() {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, SEGMENT1A_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800100e:	4833      	ldr	r0, [pc, #204]	@ (80010dc <init_segment+0xd8>)
 8001010:	f001 f8a7 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEGMENT2A_Pin, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800101a:	4830      	ldr	r0, [pc, #192]	@ (80010dc <init_segment+0xd8>)
 800101c:	f001 f8a1 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEGMENT3A_Pin, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001026:	482d      	ldr	r0, [pc, #180]	@ (80010dc <init_segment+0xd8>)
 8001028:	f001 f89b 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEGMENT4A_Pin, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001032:	482a      	ldr	r0, [pc, #168]	@ (80010dc <init_segment+0xd8>)
 8001034:	f001 f895 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEGMENT5A_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800103e:	4827      	ldr	r0, [pc, #156]	@ (80010dc <init_segment+0xd8>)
 8001040:	f001 f88f 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEGMENT6A_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800104a:	4824      	ldr	r0, [pc, #144]	@ (80010dc <init_segment+0xd8>)
 800104c:	f001 f889 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEGMENT7A_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001056:	4821      	ldr	r0, [pc, #132]	@ (80010dc <init_segment+0xd8>)
 8001058:	f001 f883 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEGMENT1B_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001062:	481f      	ldr	r0, [pc, #124]	@ (80010e0 <init_segment+0xdc>)
 8001064:	f001 f87d 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEGMENT2B_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800106e:	481c      	ldr	r0, [pc, #112]	@ (80010e0 <init_segment+0xdc>)
 8001070:	f001 f877 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SEGMENT3B_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800107a:	4818      	ldr	r0, [pc, #96]	@ (80010dc <init_segment+0xd8>)
 800107c:	f001 f871 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, SEGMENT4B_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001086:	4817      	ldr	r0, [pc, #92]	@ (80010e4 <init_segment+0xe0>)
 8001088:	f001 f86b 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, SEGMENT5B_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001092:	4814      	ldr	r0, [pc, #80]	@ (80010e4 <init_segment+0xe0>)
 8001094:	f001 f865 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, SEGMENT6B_Pin, GPIO_PIN_RESET);
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800109e:	4811      	ldr	r0, [pc, #68]	@ (80010e4 <init_segment+0xe0>)
 80010a0:	f001 f85f 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEGMENT7B_Pin, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010aa:	480d      	ldr	r0, [pc, #52]	@ (80010e0 <init_segment+0xdc>)
 80010ac:	f001 f859 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED7A2_Pin, SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2120      	movs	r1, #32
 80010b4:	4809      	ldr	r0, [pc, #36]	@ (80010dc <init_segment+0xd8>)
 80010b6:	f001 f854 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED7A1_Pin, SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	2110      	movs	r1, #16
 80010be:	4807      	ldr	r0, [pc, #28]	@ (80010dc <init_segment+0xd8>)
 80010c0:	f001 f84f 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED7B2_Pin, SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	2180      	movs	r1, #128	@ 0x80
 80010c8:	4804      	ldr	r0, [pc, #16]	@ (80010dc <init_segment+0xd8>)
 80010ca:	f001 f84a 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED7B1_Pin, SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2140      	movs	r1, #64	@ 0x40
 80010d2:	4802      	ldr	r0, [pc, #8]	@ (80010dc <init_segment+0xd8>)
 80010d4:	f001 f845 	bl	8002162 <HAL_GPIO_WritePin>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40010c00 	.word	0x40010c00
 80010e0:	40010800 	.word	0x40010800
 80010e4:	40011000 	.word	0x40011000

080010e8 <display7SEG>:

void display7SEG(int road, int num) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	// Mảng lưu giá trị các đoạn cho các số từ 0 đến 9
	    uint8_t segments[10] = {
 80010f2:	4a75      	ldr	r2, [pc, #468]	@ (80012c8 <display7SEG+0x1e0>)
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80010fa:	c303      	stmia	r3!, {r0, r1}
 80010fc:	801a      	strh	r2, [r3, #0]
	        0x82, // 6 -> các đoạn a c d e f g (b tắt)
	        0xF8, // 7 -> các đoạn a b c (d, e, f, g tắt)
	        0x80, // 8 -> tất cả các đoạn a b c d e f g đều sáng
	        0x90  // 9 -> các đoạn a b c f g (d, e tắt)
	    };
	    if (road == 1) {
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d16e      	bne.n	80011e2 <display7SEG+0xfa>
	    	HAL_GPIO_WritePin(GPIOB, SEGMENT1A_Pin, (segments[num] & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001104:	f107 020c 	add.w	r2, r7, #12
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	4413      	add	r3, r2
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	461a      	mov	r2, r3
 8001116:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800111a:	486c      	ldr	r0, [pc, #432]	@ (80012cc <display7SEG+0x1e4>)
 800111c:	f001 f821 	bl	8002162 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, SEGMENT2A_Pin, (segments[num] & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001120:	f107 020c 	add.w	r2, r7, #12
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	4413      	add	r3, r2
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	105b      	asrs	r3, r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800113a:	4864      	ldr	r0, [pc, #400]	@ (80012cc <display7SEG+0x1e4>)
 800113c:	f001 f811 	bl	8002162 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, SEGMENT3A_Pin, (segments[num] & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001140:	f107 020c 	add.w	r2, r7, #12
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	4413      	add	r3, r2
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	109b      	asrs	r3, r3, #2
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	b2db      	uxtb	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800115a:	485c      	ldr	r0, [pc, #368]	@ (80012cc <display7SEG+0x1e4>)
 800115c:	f001 f801 	bl	8002162 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, SEGMENT4A_Pin, (segments[num] & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001160:	f107 020c 	add.w	r2, r7, #12
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	4413      	add	r3, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	10db      	asrs	r3, r3, #3
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	b2db      	uxtb	r3, r3
 8001174:	461a      	mov	r2, r3
 8001176:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800117a:	4854      	ldr	r0, [pc, #336]	@ (80012cc <display7SEG+0x1e4>)
 800117c:	f000 fff1 	bl	8002162 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, SEGMENT5A_Pin, (segments[num] & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001180:	f107 020c 	add.w	r2, r7, #12
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	4413      	add	r3, r2
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	111b      	asrs	r3, r3, #4
 800118c:	b2db      	uxtb	r3, r3
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800119a:	484c      	ldr	r0, [pc, #304]	@ (80012cc <display7SEG+0x1e4>)
 800119c:	f000 ffe1 	bl	8002162 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, SEGMENT6A_Pin, (segments[num] & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011a0:	f107 020c 	add.w	r2, r7, #12
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	115b      	asrs	r3, r3, #5
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	461a      	mov	r2, r3
 80011b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ba:	4844      	ldr	r0, [pc, #272]	@ (80012cc <display7SEG+0x1e4>)
 80011bc:	f000 ffd1 	bl	8002162 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, SEGMENT7A_Pin, (segments[num] & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011c0:	f107 020c 	add.w	r2, r7, #12
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	119b      	asrs	r3, r3, #6
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011da:	483c      	ldr	r0, [pc, #240]	@ (80012cc <display7SEG+0x1e4>)
 80011dc:	f000 ffc1 	bl	8002162 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOC, SEGMENT4B_Pin, (segments[num] & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	    	HAL_GPIO_WritePin(GPIOC, SEGMENT5B_Pin, (segments[num] & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	    	HAL_GPIO_WritePin(GPIOC, SEGMENT6B_Pin, (segments[num] & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	    	HAL_GPIO_WritePin(GPIOA, SEGMENT7B_Pin, (segments[num] & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	    }
}
 80011e0:	e06d      	b.n	80012be <display7SEG+0x1d6>
	    	HAL_GPIO_WritePin(GPIOA, SEGMENT1B_Pin, (segments[num] & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011e2:	f107 020c 	add.w	r2, r7, #12
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	4413      	add	r3, r2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011f8:	4835      	ldr	r0, [pc, #212]	@ (80012d0 <display7SEG+0x1e8>)
 80011fa:	f000 ffb2 	bl	8002162 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOA, SEGMENT2B_Pin, (segments[num] & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80011fe:	f107 020c 	add.w	r2, r7, #12
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	4413      	add	r3, r2
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	105b      	asrs	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	461a      	mov	r2, r3
 8001214:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001218:	482d      	ldr	r0, [pc, #180]	@ (80012d0 <display7SEG+0x1e8>)
 800121a:	f000 ffa2 	bl	8002162 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, SEGMENT3B_Pin, (segments[num] & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800121e:	f107 020c 	add.w	r2, r7, #12
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	4413      	add	r3, r2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	109b      	asrs	r3, r3, #2
 800122a:	b2db      	uxtb	r3, r3
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	b2db      	uxtb	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001238:	4824      	ldr	r0, [pc, #144]	@ (80012cc <display7SEG+0x1e4>)
 800123a:	f000 ff92 	bl	8002162 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOC, SEGMENT4B_Pin, (segments[num] & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800123e:	f107 020c 	add.w	r2, r7, #12
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	4413      	add	r3, r2
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	10db      	asrs	r3, r3, #3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	b2db      	uxtb	r3, r3
 8001252:	461a      	mov	r2, r3
 8001254:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001258:	481e      	ldr	r0, [pc, #120]	@ (80012d4 <display7SEG+0x1ec>)
 800125a:	f000 ff82 	bl	8002162 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOC, SEGMENT5B_Pin, (segments[num] & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800125e:	f107 020c 	add.w	r2, r7, #12
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	111b      	asrs	r3, r3, #4
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001278:	4816      	ldr	r0, [pc, #88]	@ (80012d4 <display7SEG+0x1ec>)
 800127a:	f000 ff72 	bl	8002162 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOC, SEGMENT6B_Pin, (segments[num] & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800127e:	f107 020c 	add.w	r2, r7, #12
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	4413      	add	r3, r2
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	115b      	asrs	r3, r3, #5
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	b2db      	uxtb	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001298:	480e      	ldr	r0, [pc, #56]	@ (80012d4 <display7SEG+0x1ec>)
 800129a:	f000 ff62 	bl	8002162 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOA, SEGMENT7B_Pin, (segments[num] & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800129e:	f107 020c 	add.w	r2, r7, #12
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	4413      	add	r3, r2
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	119b      	asrs	r3, r3, #6
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	461a      	mov	r2, r3
 80012b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012b8:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <display7SEG+0x1e8>)
 80012ba:	f000 ff52 	bl	8002162 <HAL_GPIO_WritePin>
}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	080031a8 	.word	0x080031a8
 80012cc:	40010c00 	.word	0x40010c00
 80012d0:	40010800 	.word	0x40010800
 80012d4:	40011000 	.word	0x40011000

080012d8 <led7_seg1>:

void led7_seg1(int led, int time) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	if (led == 1) {
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d10e      	bne.n	8001306 <led7_seg1+0x2e>
		HAL_GPIO_WritePin(GPIOB, LED7A2_Pin, SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2120      	movs	r1, #32
 80012ec:	480f      	ldr	r0, [pc, #60]	@ (800132c <led7_seg1+0x54>)
 80012ee:	f000 ff38 	bl	8002162 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED7A1_Pin, RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2110      	movs	r1, #16
 80012f6:	480d      	ldr	r0, [pc, #52]	@ (800132c <led7_seg1+0x54>)
 80012f8:	f000 ff33 	bl	8002162 <HAL_GPIO_WritePin>
		display7SEG(1, time);
 80012fc:	6839      	ldr	r1, [r7, #0]
 80012fe:	2001      	movs	r0, #1
 8001300:	f7ff fef2 	bl	80010e8 <display7SEG>
	}else {
		HAL_GPIO_WritePin(GPIOB, LED7A1_Pin, SET);
		HAL_GPIO_WritePin(GPIOB, LED7A2_Pin, RESET);
		display7SEG(1, time);
	}
}
 8001304:	e00d      	b.n	8001322 <led7_seg1+0x4a>
		HAL_GPIO_WritePin(GPIOB, LED7A1_Pin, SET);
 8001306:	2201      	movs	r2, #1
 8001308:	2110      	movs	r1, #16
 800130a:	4808      	ldr	r0, [pc, #32]	@ (800132c <led7_seg1+0x54>)
 800130c:	f000 ff29 	bl	8002162 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED7A2_Pin, RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2120      	movs	r1, #32
 8001314:	4805      	ldr	r0, [pc, #20]	@ (800132c <led7_seg1+0x54>)
 8001316:	f000 ff24 	bl	8002162 <HAL_GPIO_WritePin>
		display7SEG(1, time);
 800131a:	6839      	ldr	r1, [r7, #0]
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff fee3 	bl	80010e8 <display7SEG>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40010c00 	.word	0x40010c00

08001330 <led7_seg2>:

void led7_seg2(int led, int time) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
	if (led == 1) {
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d10e      	bne.n	800135e <led7_seg2+0x2e>
		HAL_GPIO_WritePin(GPIOB, LED7B2_Pin, SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2180      	movs	r1, #128	@ 0x80
 8001344:	480f      	ldr	r0, [pc, #60]	@ (8001384 <led7_seg2+0x54>)
 8001346:	f000 ff0c 	bl	8002162 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED7B1_Pin, RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2140      	movs	r1, #64	@ 0x40
 800134e:	480d      	ldr	r0, [pc, #52]	@ (8001384 <led7_seg2+0x54>)
 8001350:	f000 ff07 	bl	8002162 <HAL_GPIO_WritePin>
		display7SEG(2, time);
 8001354:	6839      	ldr	r1, [r7, #0]
 8001356:	2002      	movs	r0, #2
 8001358:	f7ff fec6 	bl	80010e8 <display7SEG>
	}else {
		HAL_GPIO_WritePin(GPIOB, LED7B1_Pin, SET);
		HAL_GPIO_WritePin(GPIOB, LED7B2_Pin, RESET);
		display7SEG(2, time);
	}
}
 800135c:	e00d      	b.n	800137a <led7_seg2+0x4a>
		HAL_GPIO_WritePin(GPIOB, LED7B1_Pin, SET);
 800135e:	2201      	movs	r2, #1
 8001360:	2140      	movs	r1, #64	@ 0x40
 8001362:	4808      	ldr	r0, [pc, #32]	@ (8001384 <led7_seg2+0x54>)
 8001364:	f000 fefd 	bl	8002162 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED7B2_Pin, RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2180      	movs	r1, #128	@ 0x80
 800136c:	4805      	ldr	r0, [pc, #20]	@ (8001384 <led7_seg2+0x54>)
 800136e:	f000 fef8 	bl	8002162 <HAL_GPIO_WritePin>
		display7SEG(2, time);
 8001372:	6839      	ldr	r1, [r7, #0]
 8001374:	2002      	movs	r0, #2
 8001376:	f7ff feb7 	bl	80010e8 <display7SEG>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40010c00 	.word	0x40010c00

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138c:	f000 fbe6 	bl	8001b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001390:	f000 f816 	bl	80013c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001394:	f000 f89c 	bl	80014d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001398:	f000 f84e 	bl	8001438 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800139c:	4806      	ldr	r0, [pc, #24]	@ (80013b8 <main+0x30>)
 800139e:	f001 fb3f 	bl	8002a20 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <main+0x34>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run();
 80013a8:	f7fe ffc8 	bl	800033c <fsm_automatic_run>
	  fsm_setting();
 80013ac:	f7ff fc06 	bl	8000bbc <fsm_setting>
	  fsm_manual();
 80013b0:	f7ff fb66 	bl	8000a80 <fsm_manual>
	  fsm_automatic_run();
 80013b4:	bf00      	nop
 80013b6:	e7f7      	b.n	80013a8 <main+0x20>
 80013b8:	200000dc 	.word	0x200000dc
 80013bc:	20000058 	.word	0x20000058

080013c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b090      	sub	sp, #64	@ 0x40
 80013c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c6:	f107 0318 	add.w	r3, r7, #24
 80013ca:	2228      	movs	r2, #40	@ 0x28
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 feb2 	bl	8003138 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e6:	2301      	movs	r3, #1
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ea:	2310      	movs	r3, #16
 80013ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fee4 	bl	80021c4 <HAL_RCC_OscConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001402:	f000 f8f7 	bl	80015f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001406:	230f      	movs	r3, #15
 8001408:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f001 f952 	bl	80026c8 <HAL_RCC_ClockConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800142a:	f000 f8e3 	bl	80015f4 <Error_Handler>
  }
}
 800142e:	bf00      	nop
 8001430:	3740      	adds	r7, #64	@ 0x40
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001454:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <MX_TIM2_Init+0x94>)
 8001456:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800145a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <MX_TIM2_Init+0x94>)
 800145e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001462:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <MX_TIM2_Init+0x94>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800146a:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <MX_TIM2_Init+0x94>)
 800146c:	2209      	movs	r2, #9
 800146e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <MX_TIM2_Init+0x94>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <MX_TIM2_Init+0x94>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800147c:	4813      	ldr	r0, [pc, #76]	@ (80014cc <MX_TIM2_Init+0x94>)
 800147e:	f001 fa7f 	bl	8002980 <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001488:	f000 f8b4 	bl	80015f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	4619      	mov	r1, r3
 8001498:	480c      	ldr	r0, [pc, #48]	@ (80014cc <MX_TIM2_Init+0x94>)
 800149a:	f001 fbfd 	bl	8002c98 <HAL_TIM_ConfigClockSource>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014a4:	f000 f8a6 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_TIM2_Init+0x94>)
 80014b6:	f001 fdd5 	bl	8003064 <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014c0:	f000 f898 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000dc 	.word	0x200000dc

080014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e4:	4b39      	ldr	r3, [pc, #228]	@ (80015cc <MX_GPIO_Init+0xfc>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a38      	ldr	r2, [pc, #224]	@ (80015cc <MX_GPIO_Init+0xfc>)
 80014ea:	f043 0310 	orr.w	r3, r3, #16
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b36      	ldr	r3, [pc, #216]	@ (80015cc <MX_GPIO_Init+0xfc>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0310 	and.w	r3, r3, #16
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fc:	4b33      	ldr	r3, [pc, #204]	@ (80015cc <MX_GPIO_Init+0xfc>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a32      	ldr	r2, [pc, #200]	@ (80015cc <MX_GPIO_Init+0xfc>)
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b30      	ldr	r3, [pc, #192]	@ (80015cc <MX_GPIO_Init+0xfc>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001514:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <MX_GPIO_Init+0xfc>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a2c      	ldr	r2, [pc, #176]	@ (80015cc <MX_GPIO_Init+0xfc>)
 800151a:	f043 0308 	orr.w	r3, r3, #8
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b2a      	ldr	r3, [pc, #168]	@ (80015cc <MX_GPIO_Init+0xfc>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SEGMENT4B_Pin|SEGMENT5B_Pin|SEGMENT6B_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001532:	4827      	ldr	r0, [pc, #156]	@ (80015d0 <MX_GPIO_Init+0x100>)
 8001534:	f000 fe15 	bl	8002162 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8001538:	2200      	movs	r2, #0
 800153a:	f64b 71ff 	movw	r1, #49151	@ 0xbfff
 800153e:	4825      	ldr	r0, [pc, #148]	@ (80015d4 <MX_GPIO_Init+0x104>)
 8001540:	f000 fe0f 	bl	8002162 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin
                          |LED9_Pin|LED10_Pin|LED11_Pin|LED12_Pin
                          |SEGMENT1B_Pin|SEGMENT7B_Pin|SEGMENT2B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEGMENT3A_Pin|SEGMENT4A_Pin|SEGMENT5A_Pin|SEGMENT6A_Pin
 8001544:	2200      	movs	r2, #0
 8001546:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 800154a:	4823      	ldr	r0, [pc, #140]	@ (80015d8 <MX_GPIO_Init+0x108>)
 800154c:	f000 fe09 	bl	8002162 <HAL_GPIO_WritePin>
                          |SEGMENT7A_Pin|SEGMENT3B_Pin|LED7A1_Pin|LED7A2_Pin
                          |LED7B1_Pin|LED7B2_Pin|SEGMENT1A_Pin|SEGMENT2A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEGMENT4B_Pin SEGMENT5B_Pin SEGMENT6B_Pin */
  GPIO_InitStruct.Pin = SEGMENT4B_Pin|SEGMENT5B_Pin|SEGMENT6B_Pin;
 8001550:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2302      	movs	r3, #2
 8001560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	4619      	mov	r1, r3
 8001568:	4819      	ldr	r0, [pc, #100]	@ (80015d0 <MX_GPIO_Init+0x100>)
 800156a:	f000 fc67 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin LED7_Pin LED8_Pin
                           LED9_Pin LED10_Pin LED11_Pin LED12_Pin
                           SEGMENT1B_Pin SEGMENT7B_Pin SEGMENT2B_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 800156e:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8001572:	613b      	str	r3, [r7, #16]
                          |LED5_Pin|LED6_Pin|LED7_Pin|LED8_Pin
                          |LED9_Pin|LED10_Pin|LED11_Pin|LED12_Pin
                          |SEGMENT1B_Pin|SEGMENT7B_Pin|SEGMENT2B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2302      	movs	r3, #2
 800157e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	4619      	mov	r1, r3
 8001586:	4813      	ldr	r0, [pc, #76]	@ (80015d4 <MX_GPIO_Init+0x104>)
 8001588:	f000 fc58 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin TIME_UP_Pin TIME_DOWN_Pin APPLY_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|TIME_UP_Pin|TIME_DOWN_Pin|APPLY_Pin;
 800158c:	230f      	movs	r3, #15
 800158e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001594:	2301      	movs	r3, #1
 8001596:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4619      	mov	r1, r3
 800159e:	480e      	ldr	r0, [pc, #56]	@ (80015d8 <MX_GPIO_Init+0x108>)
 80015a0:	f000 fc4c 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEGMENT3A_Pin SEGMENT4A_Pin SEGMENT5A_Pin SEGMENT6A_Pin
                           SEGMENT7A_Pin SEGMENT3B_Pin LED7A1_Pin LED7A2_Pin
                           LED7B1_Pin LED7B2_Pin SEGMENT1A_Pin SEGMENT2A_Pin */
  GPIO_InitStruct.Pin = SEGMENT3A_Pin|SEGMENT4A_Pin|SEGMENT5A_Pin|SEGMENT6A_Pin
 80015a4:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80015a8:	613b      	str	r3, [r7, #16]
                          |SEGMENT7A_Pin|SEGMENT3B_Pin|LED7A1_Pin|LED7A2_Pin
                          |LED7B1_Pin|LED7B2_Pin|SEGMENT1A_Pin|SEGMENT2A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 0310 	add.w	r3, r7, #16
 80015ba:	4619      	mov	r1, r3
 80015bc:	4806      	ldr	r0, [pc, #24]	@ (80015d8 <MX_GPIO_Init+0x108>)
 80015be:	f000 fc3d 	bl	8001e3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40011000 	.word	0x40011000
 80015d4:	40010800 	.word	0x40010800
 80015d8:	40010c00 	.word	0x40010c00

080015dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	timer_run();
 80015e4:	f000 f82c 	bl	8001640 <timer_run>
	getKeyInput();
 80015e8:	f7fe fdf8 	bl	80001dc <getKeyInput>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f8:	b672      	cpsid	i
}
 80015fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <Error_Handler+0x8>

08001600 <setTimer>:
#include "software_timer.h"

int timer_flag[10];
int timer_counter[10];

void setTimer(int index, int counter) {
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <setTimer+0x34>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2100      	movs	r1, #0
 8001610:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter/10;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	4a08      	ldr	r2, [pc, #32]	@ (8001638 <setTimer+0x38>)
 8001618:	fb82 1203 	smull	r1, r2, r2, r3
 800161c:	1092      	asrs	r2, r2, #2
 800161e:	17db      	asrs	r3, r3, #31
 8001620:	1ad2      	subs	r2, r2, r3
 8001622:	4906      	ldr	r1, [pc, #24]	@ (800163c <setTimer+0x3c>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	20000124 	.word	0x20000124
 8001638:	66666667 	.word	0x66666667
 800163c:	2000014c 	.word	0x2000014c

08001640 <timer_run>:

void timer_run() {
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	e01c      	b.n	8001686 <timer_run+0x46>
		if (timer_counter[i] > 0) {
 800164c:	4a12      	ldr	r2, [pc, #72]	@ (8001698 <timer_run+0x58>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	2b00      	cmp	r3, #0
 8001656:	dd08      	ble.n	800166a <timer_run+0x2a>
			timer_counter[i]--;
 8001658:	4a0f      	ldr	r2, [pc, #60]	@ (8001698 <timer_run+0x58>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001660:	1e5a      	subs	r2, r3, #1
 8001662:	490d      	ldr	r1, [pc, #52]	@ (8001698 <timer_run+0x58>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (timer_counter[i] <= 0) {
 800166a:	4a0b      	ldr	r2, [pc, #44]	@ (8001698 <timer_run+0x58>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001672:	2b00      	cmp	r3, #0
 8001674:	dc04      	bgt.n	8001680 <timer_run+0x40>
			timer_flag[i] = 1;
 8001676:	4a09      	ldr	r2, [pc, #36]	@ (800169c <timer_run+0x5c>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2101      	movs	r1, #1
 800167c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3301      	adds	r3, #1
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b09      	cmp	r3, #9
 800168a:	dddf      	ble.n	800164c <timer_run+0xc>
		}
	}
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	2000014c 	.word	0x2000014c
 800169c:	20000124 	.word	0x20000124

080016a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_MspInit+0x5c>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	4a14      	ldr	r2, [pc, #80]	@ (80016fc <HAL_MspInit+0x5c>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6193      	str	r3, [r2, #24]
 80016b2:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <HAL_MspInit+0x5c>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <HAL_MspInit+0x5c>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	4a0e      	ldr	r2, [pc, #56]	@ (80016fc <HAL_MspInit+0x5c>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c8:	61d3      	str	r3, [r2, #28]
 80016ca:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <HAL_MspInit+0x5c>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <HAL_MspInit+0x60>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	4a04      	ldr	r2, [pc, #16]	@ (8001700 <HAL_MspInit+0x60>)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	40021000 	.word	0x40021000
 8001700:	40010000 	.word	0x40010000

08001704 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001714:	d113      	bne.n	800173e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001716:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <HAL_TIM_Base_MspInit+0x44>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	4a0b      	ldr	r2, [pc, #44]	@ (8001748 <HAL_TIM_Base_MspInit+0x44>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	61d3      	str	r3, [r2, #28]
 8001722:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <HAL_TIM_Base_MspInit+0x44>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	201c      	movs	r0, #28
 8001734:	f000 fb4b 	bl	8001dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001738:	201c      	movs	r0, #28
 800173a:	f000 fb64 	bl	8001e06 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000

0800174c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <NMI_Handler+0x4>

08001754 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <MemManage_Handler+0x4>

08001764 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <BusFault_Handler+0x4>

0800176c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <UsageFault_Handler+0x4>

08001774 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 fa24 	bl	8001be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <TIM2_IRQHandler+0x10>)
 80017aa:	f001 f985 	bl	8002ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200000dc 	.word	0x200000dc

080017b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <INIT_LIGHT>:
 *      Author: MSIFPT
 */

#include "traffic_light.h"

void INIT_LIGHT() {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2101      	movs	r1, #1
 80017cc:	481f      	ldr	r0, [pc, #124]	@ (800184c <INIT_LIGHT+0x88>)
 80017ce:	f000 fcc8 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2102      	movs	r1, #2
 80017d6:	481d      	ldr	r0, [pc, #116]	@ (800184c <INIT_LIGHT+0x88>)
 80017d8:	f000 fcc3 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	2104      	movs	r1, #4
 80017e0:	481a      	ldr	r0, [pc, #104]	@ (800184c <INIT_LIGHT+0x88>)
 80017e2:	f000 fcbe 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2108      	movs	r1, #8
 80017ea:	4818      	ldr	r0, [pc, #96]	@ (800184c <INIT_LIGHT+0x88>)
 80017ec:	f000 fcb9 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2110      	movs	r1, #16
 80017f4:	4815      	ldr	r0, [pc, #84]	@ (800184c <INIT_LIGHT+0x88>)
 80017f6:	f000 fcb4 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2120      	movs	r1, #32
 80017fe:	4813      	ldr	r0, [pc, #76]	@ (800184c <INIT_LIGHT+0x88>)
 8001800:	f000 fcaf 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	2140      	movs	r1, #64	@ 0x40
 8001808:	4810      	ldr	r0, [pc, #64]	@ (800184c <INIT_LIGHT+0x88>)
 800180a:	f000 fcaa 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	2180      	movs	r1, #128	@ 0x80
 8001812:	480e      	ldr	r0, [pc, #56]	@ (800184c <INIT_LIGHT+0x88>)
 8001814:	f000 fca5 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800181e:	480b      	ldr	r0, [pc, #44]	@ (800184c <INIT_LIGHT+0x88>)
 8001820:	f000 fc9f 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800182a:	4808      	ldr	r0, [pc, #32]	@ (800184c <INIT_LIGHT+0x88>)
 800182c:	f000 fc99 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001836:	4805      	ldr	r0, [pc, #20]	@ (800184c <INIT_LIGHT+0x88>)
 8001838:	f000 fc93 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001842:	4802      	ldr	r0, [pc, #8]	@ (800184c <INIT_LIGHT+0x88>)
 8001844:	f000 fc8d 	bl	8002162 <HAL_GPIO_WritePin>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40010800 	.word	0x40010800

08001850 <LIGHT_RED_GREEN>:
void LIGHT_RED_GREEN() {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	2101      	movs	r1, #1
 8001858:	481f      	ldr	r0, [pc, #124]	@ (80018d8 <LIGHT_RED_GREEN+0x88>)
 800185a:	f000 fc82 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	2102      	movs	r1, #2
 8001862:	481d      	ldr	r0, [pc, #116]	@ (80018d8 <LIGHT_RED_GREEN+0x88>)
 8001864:	f000 fc7d 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001868:	2201      	movs	r2, #1
 800186a:	2104      	movs	r1, #4
 800186c:	481a      	ldr	r0, [pc, #104]	@ (80018d8 <LIGHT_RED_GREEN+0x88>)
 800186e:	f000 fc78 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001872:	2201      	movs	r2, #1
 8001874:	2108      	movs	r1, #8
 8001876:	4818      	ldr	r0, [pc, #96]	@ (80018d8 <LIGHT_RED_GREEN+0x88>)
 8001878:	f000 fc73 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	2110      	movs	r1, #16
 8001880:	4815      	ldr	r0, [pc, #84]	@ (80018d8 <LIGHT_RED_GREEN+0x88>)
 8001882:	f000 fc6e 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	2120      	movs	r1, #32
 800188a:	4813      	ldr	r0, [pc, #76]	@ (80018d8 <LIGHT_RED_GREEN+0x88>)
 800188c:	f000 fc69 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2140      	movs	r1, #64	@ 0x40
 8001894:	4810      	ldr	r0, [pc, #64]	@ (80018d8 <LIGHT_RED_GREEN+0x88>)
 8001896:	f000 fc64 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2180      	movs	r1, #128	@ 0x80
 800189e:	480e      	ldr	r0, [pc, #56]	@ (80018d8 <LIGHT_RED_GREEN+0x88>)
 80018a0:	f000 fc5f 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_SET);
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018aa:	480b      	ldr	r0, [pc, #44]	@ (80018d8 <LIGHT_RED_GREEN+0x88>)
 80018ac:	f000 fc59 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, GPIO_PIN_SET);
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018b6:	4808      	ldr	r0, [pc, #32]	@ (80018d8 <LIGHT_RED_GREEN+0x88>)
 80018b8:	f000 fc53 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, GPIO_PIN_RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018c2:	4805      	ldr	r0, [pc, #20]	@ (80018d8 <LIGHT_RED_GREEN+0x88>)
 80018c4:	f000 fc4d 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018ce:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <LIGHT_RED_GREEN+0x88>)
 80018d0:	f000 fc47 	bl	8002162 <HAL_GPIO_WritePin>
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40010800 	.word	0x40010800

080018dc <LIGHT_RED_YELOW>:
void LIGHT_RED_YELOW() {
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2101      	movs	r1, #1
 80018e4:	481f      	ldr	r0, [pc, #124]	@ (8001964 <LIGHT_RED_YELOW+0x88>)
 80018e6:	f000 fc3c 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	2102      	movs	r1, #2
 80018ee:	481d      	ldr	r0, [pc, #116]	@ (8001964 <LIGHT_RED_YELOW+0x88>)
 80018f0:	f000 fc37 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2104      	movs	r1, #4
 80018f8:	481a      	ldr	r0, [pc, #104]	@ (8001964 <LIGHT_RED_YELOW+0x88>)
 80018fa:	f000 fc32 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80018fe:	2201      	movs	r2, #1
 8001900:	2108      	movs	r1, #8
 8001902:	4818      	ldr	r0, [pc, #96]	@ (8001964 <LIGHT_RED_YELOW+0x88>)
 8001904:	f000 fc2d 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	2110      	movs	r1, #16
 800190c:	4815      	ldr	r0, [pc, #84]	@ (8001964 <LIGHT_RED_YELOW+0x88>)
 800190e:	f000 fc28 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	2120      	movs	r1, #32
 8001916:	4813      	ldr	r0, [pc, #76]	@ (8001964 <LIGHT_RED_YELOW+0x88>)
 8001918:	f000 fc23 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	2140      	movs	r1, #64	@ 0x40
 8001920:	4810      	ldr	r0, [pc, #64]	@ (8001964 <LIGHT_RED_YELOW+0x88>)
 8001922:	f000 fc1e 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 8001926:	2201      	movs	r2, #1
 8001928:	2180      	movs	r1, #128	@ 0x80
 800192a:	480e      	ldr	r0, [pc, #56]	@ (8001964 <LIGHT_RED_YELOW+0x88>)
 800192c:	f000 fc19 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001936:	480b      	ldr	r0, [pc, #44]	@ (8001964 <LIGHT_RED_YELOW+0x88>)
 8001938:	f000 fc13 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, GPIO_PIN_SET);
 800193c:	2201      	movs	r2, #1
 800193e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001942:	4808      	ldr	r0, [pc, #32]	@ (8001964 <LIGHT_RED_YELOW+0x88>)
 8001944:	f000 fc0d 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800194e:	4805      	ldr	r0, [pc, #20]	@ (8001964 <LIGHT_RED_YELOW+0x88>)
 8001950:	f000 fc07 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800195a:	4802      	ldr	r0, [pc, #8]	@ (8001964 <LIGHT_RED_YELOW+0x88>)
 800195c:	f000 fc01 	bl	8002162 <HAL_GPIO_WritePin>

}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40010800 	.word	0x40010800

08001968 <LIGHT_GREEN_RED>:
void LIGHT_GREEN_RED() {
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800196c:	2201      	movs	r2, #1
 800196e:	2101      	movs	r1, #1
 8001970:	481f      	ldr	r0, [pc, #124]	@ (80019f0 <LIGHT_GREEN_RED+0x88>)
 8001972:	f000 fbf6 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	2102      	movs	r1, #2
 800197a:	481d      	ldr	r0, [pc, #116]	@ (80019f0 <LIGHT_GREEN_RED+0x88>)
 800197c:	f000 fbf1 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	2104      	movs	r1, #4
 8001984:	481a      	ldr	r0, [pc, #104]	@ (80019f0 <LIGHT_GREEN_RED+0x88>)
 8001986:	f000 fbec 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	2108      	movs	r1, #8
 800198e:	4818      	ldr	r0, [pc, #96]	@ (80019f0 <LIGHT_GREEN_RED+0x88>)
 8001990:	f000 fbe7 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	2110      	movs	r1, #16
 8001998:	4815      	ldr	r0, [pc, #84]	@ (80019f0 <LIGHT_GREEN_RED+0x88>)
 800199a:	f000 fbe2 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	2120      	movs	r1, #32
 80019a2:	4813      	ldr	r0, [pc, #76]	@ (80019f0 <LIGHT_GREEN_RED+0x88>)
 80019a4:	f000 fbdd 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	2140      	movs	r1, #64	@ 0x40
 80019ac:	4810      	ldr	r0, [pc, #64]	@ (80019f0 <LIGHT_GREEN_RED+0x88>)
 80019ae:	f000 fbd8 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2180      	movs	r1, #128	@ 0x80
 80019b6:	480e      	ldr	r0, [pc, #56]	@ (80019f0 <LIGHT_GREEN_RED+0x88>)
 80019b8:	f000 fbd3 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_RESET);
 80019bc:	2200      	movs	r2, #0
 80019be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c2:	480b      	ldr	r0, [pc, #44]	@ (80019f0 <LIGHT_GREEN_RED+0x88>)
 80019c4:	f000 fbcd 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, GPIO_PIN_RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019ce:	4808      	ldr	r0, [pc, #32]	@ (80019f0 <LIGHT_GREEN_RED+0x88>)
 80019d0:	f000 fbc7 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019da:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <LIGHT_GREEN_RED+0x88>)
 80019dc:	f000 fbc1 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, GPIO_PIN_SET);
 80019e0:	2201      	movs	r2, #1
 80019e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019e6:	4802      	ldr	r0, [pc, #8]	@ (80019f0 <LIGHT_GREEN_RED+0x88>)
 80019e8:	f000 fbbb 	bl	8002162 <HAL_GPIO_WritePin>
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40010800 	.word	0x40010800

080019f4 <LIGHT_YELOW_RED>:
void LIGHT_YELOW_RED() {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80019f8:	2201      	movs	r2, #1
 80019fa:	2101      	movs	r1, #1
 80019fc:	481f      	ldr	r0, [pc, #124]	@ (8001a7c <LIGHT_YELOW_RED+0x88>)
 80019fe:	f000 fbb0 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2102      	movs	r1, #2
 8001a06:	481d      	ldr	r0, [pc, #116]	@ (8001a7c <LIGHT_YELOW_RED+0x88>)
 8001a08:	f000 fbab 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2104      	movs	r1, #4
 8001a10:	481a      	ldr	r0, [pc, #104]	@ (8001a7c <LIGHT_YELOW_RED+0x88>)
 8001a12:	f000 fba6 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2108      	movs	r1, #8
 8001a1a:	4818      	ldr	r0, [pc, #96]	@ (8001a7c <LIGHT_YELOW_RED+0x88>)
 8001a1c:	f000 fba1 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	2110      	movs	r1, #16
 8001a24:	4815      	ldr	r0, [pc, #84]	@ (8001a7c <LIGHT_YELOW_RED+0x88>)
 8001a26:	f000 fb9c 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2120      	movs	r1, #32
 8001a2e:	4813      	ldr	r0, [pc, #76]	@ (8001a7c <LIGHT_YELOW_RED+0x88>)
 8001a30:	f000 fb97 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	2140      	movs	r1, #64	@ 0x40
 8001a38:	4810      	ldr	r0, [pc, #64]	@ (8001a7c <LIGHT_YELOW_RED+0x88>)
 8001a3a:	f000 fb92 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2180      	movs	r1, #128	@ 0x80
 8001a42:	480e      	ldr	r0, [pc, #56]	@ (8001a7c <LIGHT_YELOW_RED+0x88>)
 8001a44:	f000 fb8d 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_RESET);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a4e:	480b      	ldr	r0, [pc, #44]	@ (8001a7c <LIGHT_YELOW_RED+0x88>)
 8001a50:	f000 fb87 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, GPIO_PIN_RESET);
 8001a54:	2200      	movs	r2, #0
 8001a56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a5a:	4808      	ldr	r0, [pc, #32]	@ (8001a7c <LIGHT_YELOW_RED+0x88>)
 8001a5c:	f000 fb81 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, GPIO_PIN_SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a66:	4805      	ldr	r0, [pc, #20]	@ (8001a7c <LIGHT_YELOW_RED+0x88>)
 8001a68:	f000 fb7b 	bl	8002162 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a72:	4802      	ldr	r0, [pc, #8]	@ (8001a7c <LIGHT_YELOW_RED+0x88>)
 8001a74:	f000 fb75 	bl	8002162 <HAL_GPIO_WritePin>
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40010800 	.word	0x40010800

08001a80 <Toggle_red>:
void Toggle_red(){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001a84:	2101      	movs	r1, #1
 8001a86:	4809      	ldr	r0, [pc, #36]	@ (8001aac <Toggle_red+0x2c>)
 8001a88:	f000 fb83 	bl	8002192 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8001a8c:	2108      	movs	r1, #8
 8001a8e:	4807      	ldr	r0, [pc, #28]	@ (8001aac <Toggle_red+0x2c>)
 8001a90:	f000 fb7f 	bl	8002192 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED7_GPIO_Port, LED7_Pin);
 8001a94:	2140      	movs	r1, #64	@ 0x40
 8001a96:	4805      	ldr	r0, [pc, #20]	@ (8001aac <Toggle_red+0x2c>)
 8001a98:	f000 fb7b 	bl	8002192 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED10_GPIO_Port, LED10_Pin);
 8001a9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <Toggle_red+0x2c>)
 8001aa2:	f000 fb76 	bl	8002192 <HAL_GPIO_TogglePin>
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40010800 	.word	0x40010800

08001ab0 <Toggle_yelow>:
void Toggle_yelow(){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	4809      	ldr	r0, [pc, #36]	@ (8001adc <Toggle_yelow+0x2c>)
 8001ab8:	f000 fb6b 	bl	8002192 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 8001abc:	2110      	movs	r1, #16
 8001abe:	4807      	ldr	r0, [pc, #28]	@ (8001adc <Toggle_yelow+0x2c>)
 8001ac0:	f000 fb67 	bl	8002192 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED8_GPIO_Port, LED8_Pin);
 8001ac4:	2180      	movs	r1, #128	@ 0x80
 8001ac6:	4805      	ldr	r0, [pc, #20]	@ (8001adc <Toggle_yelow+0x2c>)
 8001ac8:	f000 fb63 	bl	8002192 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED11_GPIO_Port, LED11_Pin);
 8001acc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ad0:	4802      	ldr	r0, [pc, #8]	@ (8001adc <Toggle_yelow+0x2c>)
 8001ad2:	f000 fb5e 	bl	8002192 <HAL_GPIO_TogglePin>
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40010800 	.word	0x40010800

08001ae0 <Toggle_green>:
void Toggle_green(){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	4809      	ldr	r0, [pc, #36]	@ (8001b0c <Toggle_green+0x2c>)
 8001ae8:	f000 fb53 	bl	8002192 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 8001aec:	2120      	movs	r1, #32
 8001aee:	4807      	ldr	r0, [pc, #28]	@ (8001b0c <Toggle_green+0x2c>)
 8001af0:	f000 fb4f 	bl	8002192 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED9_GPIO_Port, LED9_Pin);
 8001af4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001af8:	4804      	ldr	r0, [pc, #16]	@ (8001b0c <Toggle_green+0x2c>)
 8001afa:	f000 fb4a 	bl	8002192 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED12_GPIO_Port, LED12_Pin);
 8001afe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b02:	4802      	ldr	r0, [pc, #8]	@ (8001b0c <Toggle_green+0x2c>)
 8001b04:	f000 fb45 	bl	8002192 <HAL_GPIO_TogglePin>
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40010800 	.word	0x40010800

08001b10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b10:	f7ff fe52 	bl	80017b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b14:	480b      	ldr	r0, [pc, #44]	@ (8001b44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b16:	490c      	ldr	r1, [pc, #48]	@ (8001b48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b18:	4a0c      	ldr	r2, [pc, #48]	@ (8001b4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b1c:	e002      	b.n	8001b24 <LoopCopyDataInit>

08001b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b22:	3304      	adds	r3, #4

08001b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b28:	d3f9      	bcc.n	8001b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2a:	4a09      	ldr	r2, [pc, #36]	@ (8001b50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b2c:	4c09      	ldr	r4, [pc, #36]	@ (8001b54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b30:	e001      	b.n	8001b36 <LoopFillZerobss>

08001b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b34:	3204      	adds	r2, #4

08001b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b38:	d3fb      	bcc.n	8001b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b3a:	f001 fb05 	bl	8003148 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b3e:	f7ff fc23 	bl	8001388 <main>
  bx lr
 8001b42:	4770      	bx	lr
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001b4c:	080031e0 	.word	0x080031e0
  ldr r2, =_sbss
 8001b50:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001b54:	20000178 	.word	0x20000178

08001b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC1_2_IRQHandler>
	...

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b60:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <HAL_Init+0x28>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a07      	ldr	r2, [pc, #28]	@ (8001b84 <HAL_Init+0x28>)
 8001b66:	f043 0310 	orr.w	r3, r3, #16
 8001b6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f000 f923 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b72:	200f      	movs	r0, #15
 8001b74:	f000 f808 	bl	8001b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b78:	f7ff fd92 	bl	80016a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40022000 	.word	0x40022000

08001b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <HAL_InitTick+0x54>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <HAL_InitTick+0x58>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f93b 	bl	8001e22 <HAL_SYSTICK_Config>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00e      	b.n	8001bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d80a      	bhi.n	8001bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f000 f903 	bl	8001dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc8:	4a06      	ldr	r2, [pc, #24]	@ (8001be4 <HAL_InitTick+0x5c>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	2000006c 	.word	0x2000006c
 8001be0:	20000074 	.word	0x20000074
 8001be4:	20000070 	.word	0x20000070

08001be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <HAL_IncTick+0x1c>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b05      	ldr	r3, [pc, #20]	@ (8001c08 <HAL_IncTick+0x20>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a03      	ldr	r2, [pc, #12]	@ (8001c08 <HAL_IncTick+0x20>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	20000074 	.word	0x20000074
 8001c08:	20000174 	.word	0x20000174

08001c0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b02      	ldr	r3, [pc, #8]	@ (8001c1c <HAL_GetTick+0x10>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	20000174 	.word	0x20000174

08001c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0c      	ldr	r3, [pc, #48]	@ (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db0b      	blt.n	8001cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4906      	ldr	r1, [pc, #24]	@ (8001cb8 <__NVIC_EnableIRQ+0x34>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	e000e100 	.word	0xe000e100

08001cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	db0a      	blt.n	8001ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	490c      	ldr	r1, [pc, #48]	@ (8001d08 <__NVIC_SetPriority+0x4c>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	0112      	lsls	r2, r2, #4
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce4:	e00a      	b.n	8001cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4908      	ldr	r1, [pc, #32]	@ (8001d0c <__NVIC_SetPriority+0x50>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	3b04      	subs	r3, #4
 8001cf4:	0112      	lsls	r2, r2, #4
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	761a      	strb	r2, [r3, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000e100 	.word	0xe000e100
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	@ 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f1c3 0307 	rsb	r3, r3, #7
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	bf28      	it	cs
 8001d2e:	2304      	movcs	r3, #4
 8001d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d902      	bls.n	8001d40 <NVIC_EncodePriority+0x30>
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3b03      	subs	r3, #3
 8001d3e:	e000      	b.n	8001d42 <NVIC_EncodePriority+0x32>
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43d9      	mvns	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	4313      	orrs	r3, r2
         );
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	@ 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d84:	d301      	bcc.n	8001d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00f      	b.n	8001daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <SysTick_Config+0x40>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d92:	210f      	movs	r1, #15
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f7ff ff90 	bl	8001cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d9c:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <SysTick_Config+0x40>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da2:	4b04      	ldr	r3, [pc, #16]	@ (8001db4 <SysTick_Config+0x40>)
 8001da4:	2207      	movs	r2, #7
 8001da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff2d 	bl	8001c20 <__NVIC_SetPriorityGrouping>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de0:	f7ff ff42 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 8001de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	6978      	ldr	r0, [r7, #20]
 8001dec:	f7ff ff90 	bl	8001d10 <NVIC_EncodePriority>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff5f 	bl	8001cbc <__NVIC_SetPriority>
}
 8001dfe:	bf00      	nop
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff35 	bl	8001c84 <__NVIC_EnableIRQ>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffa2 	bl	8001d74 <SysTick_Config>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b08b      	sub	sp, #44	@ 0x2c
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4e:	e161      	b.n	8002114 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e50:	2201      	movs	r2, #1
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	f040 8150 	bne.w	800210e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4a97      	ldr	r2, [pc, #604]	@ (80020d0 <HAL_GPIO_Init+0x294>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d05e      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e78:	4a95      	ldr	r2, [pc, #596]	@ (80020d0 <HAL_GPIO_Init+0x294>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d875      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001e7e:	4a95      	ldr	r2, [pc, #596]	@ (80020d4 <HAL_GPIO_Init+0x298>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d058      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e84:	4a93      	ldr	r2, [pc, #588]	@ (80020d4 <HAL_GPIO_Init+0x298>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d86f      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001e8a:	4a93      	ldr	r2, [pc, #588]	@ (80020d8 <HAL_GPIO_Init+0x29c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d052      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e90:	4a91      	ldr	r2, [pc, #580]	@ (80020d8 <HAL_GPIO_Init+0x29c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d869      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001e96:	4a91      	ldr	r2, [pc, #580]	@ (80020dc <HAL_GPIO_Init+0x2a0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d04c      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001e9c:	4a8f      	ldr	r2, [pc, #572]	@ (80020dc <HAL_GPIO_Init+0x2a0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d863      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001ea2:	4a8f      	ldr	r2, [pc, #572]	@ (80020e0 <HAL_GPIO_Init+0x2a4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d046      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
 8001ea8:	4a8d      	ldr	r2, [pc, #564]	@ (80020e0 <HAL_GPIO_Init+0x2a4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d85d      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001eae:	2b12      	cmp	r3, #18
 8001eb0:	d82a      	bhi.n	8001f08 <HAL_GPIO_Init+0xcc>
 8001eb2:	2b12      	cmp	r3, #18
 8001eb4:	d859      	bhi.n	8001f6a <HAL_GPIO_Init+0x12e>
 8001eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ebc <HAL_GPIO_Init+0x80>)
 8001eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebc:	08001f37 	.word	0x08001f37
 8001ec0:	08001f11 	.word	0x08001f11
 8001ec4:	08001f23 	.word	0x08001f23
 8001ec8:	08001f65 	.word	0x08001f65
 8001ecc:	08001f6b 	.word	0x08001f6b
 8001ed0:	08001f6b 	.word	0x08001f6b
 8001ed4:	08001f6b 	.word	0x08001f6b
 8001ed8:	08001f6b 	.word	0x08001f6b
 8001edc:	08001f6b 	.word	0x08001f6b
 8001ee0:	08001f6b 	.word	0x08001f6b
 8001ee4:	08001f6b 	.word	0x08001f6b
 8001ee8:	08001f6b 	.word	0x08001f6b
 8001eec:	08001f6b 	.word	0x08001f6b
 8001ef0:	08001f6b 	.word	0x08001f6b
 8001ef4:	08001f6b 	.word	0x08001f6b
 8001ef8:	08001f6b 	.word	0x08001f6b
 8001efc:	08001f6b 	.word	0x08001f6b
 8001f00:	08001f19 	.word	0x08001f19
 8001f04:	08001f2d 	.word	0x08001f2d
 8001f08:	4a76      	ldr	r2, [pc, #472]	@ (80020e4 <HAL_GPIO_Init+0x2a8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f0e:	e02c      	b.n	8001f6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	623b      	str	r3, [r7, #32]
          break;
 8001f16:	e029      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	623b      	str	r3, [r7, #32]
          break;
 8001f20:	e024      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	3308      	adds	r3, #8
 8001f28:	623b      	str	r3, [r7, #32]
          break;
 8001f2a:	e01f      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	330c      	adds	r3, #12
 8001f32:	623b      	str	r3, [r7, #32]
          break;
 8001f34:	e01a      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f3e:	2304      	movs	r3, #4
 8001f40:	623b      	str	r3, [r7, #32]
          break;
 8001f42:	e013      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d105      	bne.n	8001f58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f4c:	2308      	movs	r3, #8
 8001f4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	611a      	str	r2, [r3, #16]
          break;
 8001f56:	e009      	b.n	8001f6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	615a      	str	r2, [r3, #20]
          break;
 8001f62:	e003      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
          break;
 8001f68:	e000      	b.n	8001f6c <HAL_GPIO_Init+0x130>
          break;
 8001f6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2bff      	cmp	r3, #255	@ 0xff
 8001f70:	d801      	bhi.n	8001f76 <HAL_GPIO_Init+0x13a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	e001      	b.n	8001f7a <HAL_GPIO_Init+0x13e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2bff      	cmp	r3, #255	@ 0xff
 8001f80:	d802      	bhi.n	8001f88 <HAL_GPIO_Init+0x14c>
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	e002      	b.n	8001f8e <HAL_GPIO_Init+0x152>
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	3b08      	subs	r3, #8
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	210f      	movs	r1, #15
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	401a      	ands	r2, r3
 8001fa0:	6a39      	ldr	r1, [r7, #32]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80a9 	beq.w	800210e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fbc:	4b4a      	ldr	r3, [pc, #296]	@ (80020e8 <HAL_GPIO_Init+0x2ac>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a49      	ldr	r2, [pc, #292]	@ (80020e8 <HAL_GPIO_Init+0x2ac>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b47      	ldr	r3, [pc, #284]	@ (80020e8 <HAL_GPIO_Init+0x2ac>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fd4:	4a45      	ldr	r2, [pc, #276]	@ (80020ec <HAL_GPIO_Init+0x2b0>)
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	3302      	adds	r3, #2
 8001fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	220f      	movs	r2, #15
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a3d      	ldr	r2, [pc, #244]	@ (80020f0 <HAL_GPIO_Init+0x2b4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00d      	beq.n	800201c <HAL_GPIO_Init+0x1e0>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3c      	ldr	r2, [pc, #240]	@ (80020f4 <HAL_GPIO_Init+0x2b8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d007      	beq.n	8002018 <HAL_GPIO_Init+0x1dc>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a3b      	ldr	r2, [pc, #236]	@ (80020f8 <HAL_GPIO_Init+0x2bc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_GPIO_Init+0x1d8>
 8002010:	2302      	movs	r3, #2
 8002012:	e004      	b.n	800201e <HAL_GPIO_Init+0x1e2>
 8002014:	2303      	movs	r3, #3
 8002016:	e002      	b.n	800201e <HAL_GPIO_Init+0x1e2>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <HAL_GPIO_Init+0x1e2>
 800201c:	2300      	movs	r3, #0
 800201e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002020:	f002 0203 	and.w	r2, r2, #3
 8002024:	0092      	lsls	r2, r2, #2
 8002026:	4093      	lsls	r3, r2
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800202e:	492f      	ldr	r1, [pc, #188]	@ (80020ec <HAL_GPIO_Init+0x2b0>)
 8002030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	3302      	adds	r3, #2
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d006      	beq.n	8002056 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002048:	4b2c      	ldr	r3, [pc, #176]	@ (80020fc <HAL_GPIO_Init+0x2c0>)
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	492b      	ldr	r1, [pc, #172]	@ (80020fc <HAL_GPIO_Init+0x2c0>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	608b      	str	r3, [r1, #8]
 8002054:	e006      	b.n	8002064 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002056:	4b29      	ldr	r3, [pc, #164]	@ (80020fc <HAL_GPIO_Init+0x2c0>)
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	43db      	mvns	r3, r3
 800205e:	4927      	ldr	r1, [pc, #156]	@ (80020fc <HAL_GPIO_Init+0x2c0>)
 8002060:	4013      	ands	r3, r2
 8002062:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002070:	4b22      	ldr	r3, [pc, #136]	@ (80020fc <HAL_GPIO_Init+0x2c0>)
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	4921      	ldr	r1, [pc, #132]	@ (80020fc <HAL_GPIO_Init+0x2c0>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	60cb      	str	r3, [r1, #12]
 800207c:	e006      	b.n	800208c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800207e:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <HAL_GPIO_Init+0x2c0>)
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	43db      	mvns	r3, r3
 8002086:	491d      	ldr	r1, [pc, #116]	@ (80020fc <HAL_GPIO_Init+0x2c0>)
 8002088:	4013      	ands	r3, r2
 800208a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002098:	4b18      	ldr	r3, [pc, #96]	@ (80020fc <HAL_GPIO_Init+0x2c0>)
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4917      	ldr	r1, [pc, #92]	@ (80020fc <HAL_GPIO_Init+0x2c0>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020a6:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <HAL_GPIO_Init+0x2c0>)
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4913      	ldr	r1, [pc, #76]	@ (80020fc <HAL_GPIO_Init+0x2c0>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d01f      	beq.n	8002100 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020c0:	4b0e      	ldr	r3, [pc, #56]	@ (80020fc <HAL_GPIO_Init+0x2c0>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	490d      	ldr	r1, [pc, #52]	@ (80020fc <HAL_GPIO_Init+0x2c0>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	600b      	str	r3, [r1, #0]
 80020cc:	e01f      	b.n	800210e <HAL_GPIO_Init+0x2d2>
 80020ce:	bf00      	nop
 80020d0:	10320000 	.word	0x10320000
 80020d4:	10310000 	.word	0x10310000
 80020d8:	10220000 	.word	0x10220000
 80020dc:	10210000 	.word	0x10210000
 80020e0:	10120000 	.word	0x10120000
 80020e4:	10110000 	.word	0x10110000
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40010000 	.word	0x40010000
 80020f0:	40010800 	.word	0x40010800
 80020f4:	40010c00 	.word	0x40010c00
 80020f8:	40011000 	.word	0x40011000
 80020fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002100:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <HAL_GPIO_Init+0x2f4>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	43db      	mvns	r3, r3
 8002108:	4909      	ldr	r1, [pc, #36]	@ (8002130 <HAL_GPIO_Init+0x2f4>)
 800210a:	4013      	ands	r3, r2
 800210c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	3301      	adds	r3, #1
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	fa22 f303 	lsr.w	r3, r2, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	f47f ae96 	bne.w	8001e50 <HAL_GPIO_Init+0x14>
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	372c      	adds	r7, #44	@ 0x2c
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	40010400 	.word	0x40010400

08002134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	887b      	ldrh	r3, [r7, #2]
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d002      	beq.n	8002152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	e001      	b.n	8002156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002156:	7bfb      	ldrb	r3, [r7, #15]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr

08002162 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	460b      	mov	r3, r1
 800216c:	807b      	strh	r3, [r7, #2]
 800216e:	4613      	mov	r3, r2
 8002170:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002172:	787b      	ldrb	r3, [r7, #1]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002178:	887a      	ldrh	r2, [r7, #2]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800217e:	e003      	b.n	8002188 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002180:	887b      	ldrh	r3, [r7, #2]
 8002182:	041a      	lsls	r2, r3, #16
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	611a      	str	r2, [r3, #16]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021a4:	887a      	ldrh	r2, [r7, #2]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	041a      	lsls	r2, r3, #16
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	887b      	ldrh	r3, [r7, #2]
 80021b2:	400b      	ands	r3, r1
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	611a      	str	r2, [r3, #16]
}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e272      	b.n	80026bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8087 	beq.w	80022f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021e4:	4b92      	ldr	r3, [pc, #584]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d00c      	beq.n	800220a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021f0:	4b8f      	ldr	r3, [pc, #572]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d112      	bne.n	8002222 <HAL_RCC_OscConfig+0x5e>
 80021fc:	4b8c      	ldr	r3, [pc, #560]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002208:	d10b      	bne.n	8002222 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220a:	4b89      	ldr	r3, [pc, #548]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d06c      	beq.n	80022f0 <HAL_RCC_OscConfig+0x12c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d168      	bne.n	80022f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e24c      	b.n	80026bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x76>
 800222c:	4b80      	ldr	r3, [pc, #512]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a7f      	ldr	r2, [pc, #508]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	e02e      	b.n	8002298 <HAL_RCC_OscConfig+0xd4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x98>
 8002242:	4b7b      	ldr	r3, [pc, #492]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a7a      	ldr	r2, [pc, #488]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002248:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b78      	ldr	r3, [pc, #480]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a77      	ldr	r2, [pc, #476]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002254:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e01d      	b.n	8002298 <HAL_RCC_OscConfig+0xd4>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0xbc>
 8002266:	4b72      	ldr	r3, [pc, #456]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a71      	ldr	r2, [pc, #452]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 800226c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b6f      	ldr	r3, [pc, #444]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a6e      	ldr	r2, [pc, #440]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0xd4>
 8002280:	4b6b      	ldr	r3, [pc, #428]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a6a      	ldr	r2, [pc, #424]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b68      	ldr	r3, [pc, #416]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a67      	ldr	r2, [pc, #412]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002292:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002296:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff fcb4 	bl	8001c0c <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a8:	f7ff fcb0 	bl	8001c0c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	@ 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e200      	b.n	80026bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0xe4>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7ff fca0 	bl	8001c0c <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7ff fc9c 	bl	8001c0c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	@ 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e1ec      	b.n	80026bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e2:	4b53      	ldr	r3, [pc, #332]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x10c>
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d063      	beq.n	80023c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800230a:	4b49      	ldr	r3, [pc, #292]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b08      	cmp	r3, #8
 8002314:	d11c      	bne.n	8002350 <HAL_RCC_OscConfig+0x18c>
 8002316:	4b46      	ldr	r3, [pc, #280]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d116      	bne.n	8002350 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	4b43      	ldr	r3, [pc, #268]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_RCC_OscConfig+0x176>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e1c0      	b.n	80026bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233a:	4b3d      	ldr	r3, [pc, #244]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4939      	ldr	r1, [pc, #228]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	e03a      	b.n	80023c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d020      	beq.n	800239a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002358:	4b36      	ldr	r3, [pc, #216]	@ (8002434 <HAL_RCC_OscConfig+0x270>)
 800235a:	2201      	movs	r2, #1
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7ff fc55 	bl	8001c0c <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002366:	f7ff fc51 	bl	8001c0c <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e1a1      	b.n	80026bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002378:	4b2d      	ldr	r3, [pc, #180]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	4b2a      	ldr	r3, [pc, #168]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4927      	ldr	r1, [pc, #156]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 8002394:	4313      	orrs	r3, r2
 8002396:	600b      	str	r3, [r1, #0]
 8002398:	e015      	b.n	80023c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239a:	4b26      	ldr	r3, [pc, #152]	@ (8002434 <HAL_RCC_OscConfig+0x270>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7ff fc34 	bl	8001c0c <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a8:	f7ff fc30 	bl	8001c0c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e180      	b.n	80026bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d03a      	beq.n	8002448 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d019      	beq.n	800240e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023da:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <HAL_RCC_OscConfig+0x274>)
 80023dc:	2201      	movs	r2, #1
 80023de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e0:	f7ff fc14 	bl	8001c0c <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e8:	f7ff fc10 	bl	8001c0c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e160      	b.n	80026bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002430 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002406:	2001      	movs	r0, #1
 8002408:	f000 fa9c 	bl	8002944 <RCC_Delay>
 800240c:	e01c      	b.n	8002448 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240e:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <HAL_RCC_OscConfig+0x274>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002414:	f7ff fbfa 	bl	8001c0c <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241a:	e00f      	b.n	800243c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241c:	f7ff fbf6 	bl	8001c0c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d908      	bls.n	800243c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e146      	b.n	80026bc <HAL_RCC_OscConfig+0x4f8>
 800242e:	bf00      	nop
 8002430:	40021000 	.word	0x40021000
 8002434:	42420000 	.word	0x42420000
 8002438:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243c:	4b92      	ldr	r3, [pc, #584]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e9      	bne.n	800241c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80a6 	beq.w	80025a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245a:	4b8b      	ldr	r3, [pc, #556]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10d      	bne.n	8002482 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	4b88      	ldr	r3, [pc, #544]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	4a87      	ldr	r2, [pc, #540]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002470:	61d3      	str	r3, [r2, #28]
 8002472:	4b85      	ldr	r3, [pc, #532]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247e:	2301      	movs	r3, #1
 8002480:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002482:	4b82      	ldr	r3, [pc, #520]	@ (800268c <HAL_RCC_OscConfig+0x4c8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d118      	bne.n	80024c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248e:	4b7f      	ldr	r3, [pc, #508]	@ (800268c <HAL_RCC_OscConfig+0x4c8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a7e      	ldr	r2, [pc, #504]	@ (800268c <HAL_RCC_OscConfig+0x4c8>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249a:	f7ff fbb7 	bl	8001c0c <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a2:	f7ff fbb3 	bl	8001c0c <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b64      	cmp	r3, #100	@ 0x64
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e103      	b.n	80026bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	4b75      	ldr	r3, [pc, #468]	@ (800268c <HAL_RCC_OscConfig+0x4c8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x312>
 80024c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6213      	str	r3, [r2, #32]
 80024d4:	e02d      	b.n	8002532 <HAL_RCC_OscConfig+0x36e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x334>
 80024de:	4b6a      	ldr	r3, [pc, #424]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a69      	ldr	r2, [pc, #420]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	6213      	str	r3, [r2, #32]
 80024ea:	4b67      	ldr	r3, [pc, #412]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4a66      	ldr	r2, [pc, #408]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	f023 0304 	bic.w	r3, r3, #4
 80024f4:	6213      	str	r3, [r2, #32]
 80024f6:	e01c      	b.n	8002532 <HAL_RCC_OscConfig+0x36e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b05      	cmp	r3, #5
 80024fe:	d10c      	bne.n	800251a <HAL_RCC_OscConfig+0x356>
 8002500:	4b61      	ldr	r3, [pc, #388]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4a60      	ldr	r2, [pc, #384]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 8002506:	f043 0304 	orr.w	r3, r3, #4
 800250a:	6213      	str	r3, [r2, #32]
 800250c:	4b5e      	ldr	r3, [pc, #376]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4a5d      	ldr	r2, [pc, #372]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6213      	str	r3, [r2, #32]
 8002518:	e00b      	b.n	8002532 <HAL_RCC_OscConfig+0x36e>
 800251a:	4b5b      	ldr	r3, [pc, #364]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4a5a      	ldr	r2, [pc, #360]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6213      	str	r3, [r2, #32]
 8002526:	4b58      	ldr	r3, [pc, #352]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4a57      	ldr	r2, [pc, #348]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	f023 0304 	bic.w	r3, r3, #4
 8002530:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d015      	beq.n	8002566 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253a:	f7ff fb67 	bl	8001c0c <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002540:	e00a      	b.n	8002558 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7ff fb63 	bl	8001c0c <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e0b1      	b.n	80026bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002558:	4b4b      	ldr	r3, [pc, #300]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0ee      	beq.n	8002542 <HAL_RCC_OscConfig+0x37e>
 8002564:	e014      	b.n	8002590 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002566:	f7ff fb51 	bl	8001c0c <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256c:	e00a      	b.n	8002584 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7ff fb4d 	bl	8001c0c <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e09b      	b.n	80026bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002584:	4b40      	ldr	r3, [pc, #256]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1ee      	bne.n	800256e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d105      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002596:	4b3c      	ldr	r3, [pc, #240]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	4a3b      	ldr	r2, [pc, #236]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 8087 	beq.w	80026ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ac:	4b36      	ldr	r3, [pc, #216]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 030c 	and.w	r3, r3, #12
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d061      	beq.n	800267c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d146      	bne.n	800264e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c0:	4b33      	ldr	r3, [pc, #204]	@ (8002690 <HAL_RCC_OscConfig+0x4cc>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c6:	f7ff fb21 	bl	8001c0c <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ce:	f7ff fb1d 	bl	8001c0c <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e06d      	b.n	80026bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e0:	4b29      	ldr	r3, [pc, #164]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f0      	bne.n	80025ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025f4:	d108      	bne.n	8002608 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025f6:	4b24      	ldr	r3, [pc, #144]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	4921      	ldr	r1, [pc, #132]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002608:	4b1f      	ldr	r3, [pc, #124]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a19      	ldr	r1, [r3, #32]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002618:	430b      	orrs	r3, r1
 800261a:	491b      	ldr	r1, [pc, #108]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002620:	4b1b      	ldr	r3, [pc, #108]	@ (8002690 <HAL_RCC_OscConfig+0x4cc>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002626:	f7ff faf1 	bl	8001c0c <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262e:	f7ff faed 	bl	8001c0c <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e03d      	b.n	80026bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002640:	4b11      	ldr	r3, [pc, #68]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x46a>
 800264c:	e035      	b.n	80026ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264e:	4b10      	ldr	r3, [pc, #64]	@ (8002690 <HAL_RCC_OscConfig+0x4cc>)
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7ff fada 	bl	8001c0c <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265c:	f7ff fad6 	bl	8001c0c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e026      	b.n	80026bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266e:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <HAL_RCC_OscConfig+0x4c4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x498>
 800267a:	e01e      	b.n	80026ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d107      	bne.n	8002694 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e019      	b.n	80026bc <HAL_RCC_OscConfig+0x4f8>
 8002688:	40021000 	.word	0x40021000
 800268c:	40007000 	.word	0x40007000
 8002690:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002694:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <HAL_RCC_OscConfig+0x500>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d106      	bne.n	80026b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40021000 	.word	0x40021000

080026c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0d0      	b.n	800287e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d910      	bls.n	800270c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b67      	ldr	r3, [pc, #412]	@ (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 0207 	bic.w	r2, r3, #7
 80026f2:	4965      	ldr	r1, [pc, #404]	@ (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b63      	ldr	r3, [pc, #396]	@ (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0b8      	b.n	800287e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d020      	beq.n	800275a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002724:	4b59      	ldr	r3, [pc, #356]	@ (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4a58      	ldr	r2, [pc, #352]	@ (800288c <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800272e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800273c:	4b53      	ldr	r3, [pc, #332]	@ (800288c <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4a52      	ldr	r2, [pc, #328]	@ (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002746:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002748:	4b50      	ldr	r3, [pc, #320]	@ (800288c <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	494d      	ldr	r1, [pc, #308]	@ (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d040      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	4b47      	ldr	r3, [pc, #284]	@ (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d115      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e07f      	b.n	800287e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002786:	4b41      	ldr	r3, [pc, #260]	@ (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e073      	b.n	800287e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002796:	4b3d      	ldr	r3, [pc, #244]	@ (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e06b      	b.n	800287e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a6:	4b39      	ldr	r3, [pc, #228]	@ (800288c <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f023 0203 	bic.w	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4936      	ldr	r1, [pc, #216]	@ (800288c <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b8:	f7ff fa28 	bl	8001c0c <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c0:	f7ff fa24 	bl	8001c0c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e053      	b.n	800287e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	4b2d      	ldr	r3, [pc, #180]	@ (800288c <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 020c 	and.w	r2, r3, #12
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d1eb      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e8:	4b27      	ldr	r3, [pc, #156]	@ (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d210      	bcs.n	8002818 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b24      	ldr	r3, [pc, #144]	@ (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 0207 	bic.w	r2, r3, #7
 80027fe:	4922      	ldr	r1, [pc, #136]	@ (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b20      	ldr	r3, [pc, #128]	@ (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e032      	b.n	800287e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002824:	4b19      	ldr	r3, [pc, #100]	@ (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4916      	ldr	r1, [pc, #88]	@ (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002842:	4b12      	ldr	r3, [pc, #72]	@ (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	490e      	ldr	r1, [pc, #56]	@ (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	4313      	orrs	r3, r2
 8002854:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002856:	f000 f821 	bl	800289c <HAL_RCC_GetSysClockFreq>
 800285a:	4602      	mov	r2, r0
 800285c:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	490a      	ldr	r1, [pc, #40]	@ (8002890 <HAL_RCC_ClockConfig+0x1c8>)
 8002868:	5ccb      	ldrb	r3, [r1, r3]
 800286a:	fa22 f303 	lsr.w	r3, r2, r3
 800286e:	4a09      	ldr	r2, [pc, #36]	@ (8002894 <HAL_RCC_ClockConfig+0x1cc>)
 8002870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002872:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <HAL_RCC_ClockConfig+0x1d0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff f986 	bl	8001b88 <HAL_InitTick>

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40022000 	.word	0x40022000
 800288c:	40021000 	.word	0x40021000
 8002890:	080031b4 	.word	0x080031b4
 8002894:	2000006c 	.word	0x2000006c
 8002898:	20000070 	.word	0x20000070

0800289c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	2300      	movs	r3, #0
 80028b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x94>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d002      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x30>
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d003      	beq.n	80028d2 <HAL_RCC_GetSysClockFreq+0x36>
 80028ca:	e027      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028cc:	4b19      	ldr	r3, [pc, #100]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ce:	613b      	str	r3, [r7, #16]
      break;
 80028d0:	e027      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	0c9b      	lsrs	r3, r3, #18
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	4a17      	ldr	r2, [pc, #92]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028dc:	5cd3      	ldrb	r3, [r2, r3]
 80028de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d010      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028ea:	4b11      	ldr	r3, [pc, #68]	@ (8002930 <HAL_RCC_GetSysClockFreq+0x94>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	0c5b      	lsrs	r3, r3, #17
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	4a11      	ldr	r2, [pc, #68]	@ (800293c <HAL_RCC_GetSysClockFreq+0xa0>)
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x98>)
 80028fe:	fb03 f202 	mul.w	r2, r3, r2
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	fbb2 f3f3 	udiv	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e004      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a0c      	ldr	r2, [pc, #48]	@ (8002940 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002910:	fb02 f303 	mul.w	r3, r2, r3
 8002914:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	613b      	str	r3, [r7, #16]
      break;
 800291a:	e002      	b.n	8002922 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800291c:	4b05      	ldr	r3, [pc, #20]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x98>)
 800291e:	613b      	str	r3, [r7, #16]
      break;
 8002920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002922:	693b      	ldr	r3, [r7, #16]
}
 8002924:	4618      	mov	r0, r3
 8002926:	371c      	adds	r7, #28
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	007a1200 	.word	0x007a1200
 8002938:	080031c4 	.word	0x080031c4
 800293c:	080031d4 	.word	0x080031d4
 8002940:	003d0900 	.word	0x003d0900

08002944 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800294c:	4b0a      	ldr	r3, [pc, #40]	@ (8002978 <RCC_Delay+0x34>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0a      	ldr	r2, [pc, #40]	@ (800297c <RCC_Delay+0x38>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	0a5b      	lsrs	r3, r3, #9
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002960:	bf00      	nop
  }
  while (Delay --);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1e5a      	subs	r2, r3, #1
 8002966:	60fa      	str	r2, [r7, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f9      	bne.n	8002960 <RCC_Delay+0x1c>
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	2000006c 	.word	0x2000006c
 800297c:	10624dd3 	.word	0x10624dd3

08002980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e041      	b.n	8002a16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe feac 	bl	8001704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3304      	adds	r3, #4
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	f000 fa56 	bl	8002e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d001      	beq.n	8002a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e035      	b.n	8002aa4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a16      	ldr	r2, [pc, #88]	@ (8002ab0 <HAL_TIM_Base_Start_IT+0x90>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d009      	beq.n	8002a6e <HAL_TIM_Base_Start_IT+0x4e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a62:	d004      	beq.n	8002a6e <HAL_TIM_Base_Start_IT+0x4e>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a12      	ldr	r2, [pc, #72]	@ (8002ab4 <HAL_TIM_Base_Start_IT+0x94>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d111      	bne.n	8002a92 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b06      	cmp	r3, #6
 8002a7e:	d010      	beq.n	8002aa2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a90:	e007      	b.n	8002aa2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0201 	orr.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40012c00 	.word	0x40012c00
 8002ab4:	40000400 	.word	0x40000400

08002ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d020      	beq.n	8002b1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01b      	beq.n	8002b1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 0202 	mvn.w	r2, #2
 8002aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f998 	bl	8002e38 <HAL_TIM_IC_CaptureCallback>
 8002b08:	e005      	b.n	8002b16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f98b 	bl	8002e26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f99a 	bl	8002e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d020      	beq.n	8002b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01b      	beq.n	8002b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0204 	mvn.w	r2, #4
 8002b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f972 	bl	8002e38 <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f965 	bl	8002e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f974 	bl	8002e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d020      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01b      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0208 	mvn.w	r2, #8
 8002b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2204      	movs	r2, #4
 8002b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f94c 	bl	8002e38 <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e005      	b.n	8002bae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f93f 	bl	8002e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f94e 	bl	8002e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d020      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01b      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0210 	mvn.w	r2, #16
 8002bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2208      	movs	r2, #8
 8002bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f926 	bl	8002e38 <HAL_TIM_IC_CaptureCallback>
 8002bec:	e005      	b.n	8002bfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f919 	bl	8002e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f928 	bl	8002e4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00c      	beq.n	8002c24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d007      	beq.n	8002c24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0201 	mvn.w	r2, #1
 8002c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe fcdc 	bl	80015dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00c      	beq.n	8002c48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d007      	beq.n	8002c48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fa6f 	bl	8003126 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00c      	beq.n	8002c6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f8f8 	bl	8002e5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00c      	beq.n	8002c90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d007      	beq.n	8002c90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0220 	mvn.w	r2, #32
 8002c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fa42 	bl	8003114 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_TIM_ConfigClockSource+0x1c>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e0b4      	b.n	8002e1e <HAL_TIM_ConfigClockSource+0x186>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cec:	d03e      	beq.n	8002d6c <HAL_TIM_ConfigClockSource+0xd4>
 8002cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cf2:	f200 8087 	bhi.w	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cfa:	f000 8086 	beq.w	8002e0a <HAL_TIM_ConfigClockSource+0x172>
 8002cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d02:	d87f      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d04:	2b70      	cmp	r3, #112	@ 0x70
 8002d06:	d01a      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0xa6>
 8002d08:	2b70      	cmp	r3, #112	@ 0x70
 8002d0a:	d87b      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d0c:	2b60      	cmp	r3, #96	@ 0x60
 8002d0e:	d050      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0x11a>
 8002d10:	2b60      	cmp	r3, #96	@ 0x60
 8002d12:	d877      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d14:	2b50      	cmp	r3, #80	@ 0x50
 8002d16:	d03c      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0xfa>
 8002d18:	2b50      	cmp	r3, #80	@ 0x50
 8002d1a:	d873      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d1c:	2b40      	cmp	r3, #64	@ 0x40
 8002d1e:	d058      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x13a>
 8002d20:	2b40      	cmp	r3, #64	@ 0x40
 8002d22:	d86f      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d24:	2b30      	cmp	r3, #48	@ 0x30
 8002d26:	d064      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d28:	2b30      	cmp	r3, #48	@ 0x30
 8002d2a:	d86b      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d060      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d867      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d05c      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d38:	2b10      	cmp	r3, #16
 8002d3a:	d05a      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d3c:	e062      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d4e:	f000 f96a 	bl	8003026 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	609a      	str	r2, [r3, #8]
      break;
 8002d6a:	e04f      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d7c:	f000 f953 	bl	8003026 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d8e:	609a      	str	r2, [r3, #8]
      break;
 8002d90:	e03c      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f000 f8ca 	bl	8002f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2150      	movs	r1, #80	@ 0x50
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 f921 	bl	8002ff2 <TIM_ITRx_SetConfig>
      break;
 8002db0:	e02c      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f000 f8e8 	bl	8002f94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2160      	movs	r1, #96	@ 0x60
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f911 	bl	8002ff2 <TIM_ITRx_SetConfig>
      break;
 8002dd0:	e01c      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dde:	461a      	mov	r2, r3
 8002de0:	f000 f8aa 	bl	8002f38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2140      	movs	r1, #64	@ 0x40
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f901 	bl	8002ff2 <TIM_ITRx_SetConfig>
      break;
 8002df0:	e00c      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f000 f8f8 	bl	8002ff2 <TIM_ITRx_SetConfig>
      break;
 8002e02:	e003      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
      break;
 8002e08:	e000      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr
	...

08002e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a2b      	ldr	r2, [pc, #172]	@ (8002f30 <TIM_Base_SetConfig+0xc0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d007      	beq.n	8002e98 <TIM_Base_SetConfig+0x28>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e8e:	d003      	beq.n	8002e98 <TIM_Base_SetConfig+0x28>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a28      	ldr	r2, [pc, #160]	@ (8002f34 <TIM_Base_SetConfig+0xc4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d108      	bne.n	8002eaa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a20      	ldr	r2, [pc, #128]	@ (8002f30 <TIM_Base_SetConfig+0xc0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d007      	beq.n	8002ec2 <TIM_Base_SetConfig+0x52>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eb8:	d003      	beq.n	8002ec2 <TIM_Base_SetConfig+0x52>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8002f34 <TIM_Base_SetConfig+0xc4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d108      	bne.n	8002ed4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a0d      	ldr	r2, [pc, #52]	@ (8002f30 <TIM_Base_SetConfig+0xc0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d103      	bne.n	8002f08 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f023 0201 	bic.w	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	611a      	str	r2, [r3, #16]
  }
}
 8002f26:	bf00      	nop
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	40000400 	.word	0x40000400

08002f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f023 0201 	bic.w	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f023 030a 	bic.w	r3, r3, #10
 8002f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	621a      	str	r2, [r3, #32]
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f023 0210 	bic.w	r2, r3, #16
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	031b      	lsls	r3, r3, #12
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	621a      	str	r2, [r3, #32]
}
 8002fe8:	bf00      	nop
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003008:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	f043 0307 	orr.w	r3, r3, #7
 8003014:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	609a      	str	r2, [r3, #8]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003026:	b480      	push	{r7}
 8003028:	b087      	sub	sp, #28
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003040:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	021a      	lsls	r2, r3, #8
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	431a      	orrs	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	4313      	orrs	r3, r2
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	609a      	str	r2, [r3, #8]
}
 800305a:	bf00      	nop
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003078:	2302      	movs	r3, #2
 800307a:	e041      	b.n	8003100 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a14      	ldr	r2, [pc, #80]	@ (800310c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d009      	beq.n	80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030c8:	d004      	beq.n	80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a10      	ldr	r2, [pc, #64]	@ (8003110 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d10c      	bne.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40012c00 	.word	0x40012c00
 8003110:	40000400 	.word	0x40000400

08003114 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <memset>:
 8003138:	4603      	mov	r3, r0
 800313a:	4402      	add	r2, r0
 800313c:	4293      	cmp	r3, r2
 800313e:	d100      	bne.n	8003142 <memset+0xa>
 8003140:	4770      	bx	lr
 8003142:	f803 1b01 	strb.w	r1, [r3], #1
 8003146:	e7f9      	b.n	800313c <memset+0x4>

08003148 <__libc_init_array>:
 8003148:	b570      	push	{r4, r5, r6, lr}
 800314a:	2600      	movs	r6, #0
 800314c:	4d0c      	ldr	r5, [pc, #48]	@ (8003180 <__libc_init_array+0x38>)
 800314e:	4c0d      	ldr	r4, [pc, #52]	@ (8003184 <__libc_init_array+0x3c>)
 8003150:	1b64      	subs	r4, r4, r5
 8003152:	10a4      	asrs	r4, r4, #2
 8003154:	42a6      	cmp	r6, r4
 8003156:	d109      	bne.n	800316c <__libc_init_array+0x24>
 8003158:	f000 f81a 	bl	8003190 <_init>
 800315c:	2600      	movs	r6, #0
 800315e:	4d0a      	ldr	r5, [pc, #40]	@ (8003188 <__libc_init_array+0x40>)
 8003160:	4c0a      	ldr	r4, [pc, #40]	@ (800318c <__libc_init_array+0x44>)
 8003162:	1b64      	subs	r4, r4, r5
 8003164:	10a4      	asrs	r4, r4, #2
 8003166:	42a6      	cmp	r6, r4
 8003168:	d105      	bne.n	8003176 <__libc_init_array+0x2e>
 800316a:	bd70      	pop	{r4, r5, r6, pc}
 800316c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003170:	4798      	blx	r3
 8003172:	3601      	adds	r6, #1
 8003174:	e7ee      	b.n	8003154 <__libc_init_array+0xc>
 8003176:	f855 3b04 	ldr.w	r3, [r5], #4
 800317a:	4798      	blx	r3
 800317c:	3601      	adds	r6, #1
 800317e:	e7f2      	b.n	8003166 <__libc_init_array+0x1e>
 8003180:	080031d8 	.word	0x080031d8
 8003184:	080031d8 	.word	0x080031d8
 8003188:	080031d8 	.word	0x080031d8
 800318c:	080031dc 	.word	0x080031dc

08003190 <_init>:
 8003190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003192:	bf00      	nop
 8003194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003196:	bc08      	pop	{r3}
 8003198:	469e      	mov	lr, r3
 800319a:	4770      	bx	lr

0800319c <_fini>:
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	bf00      	nop
 80031a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a2:	bc08      	pop	{r3}
 80031a4:	469e      	mov	lr, r3
 80031a6:	4770      	bx	lr
